<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python小课堂16 - 函数篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-16-han-shu-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-16-han-shu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂16-函数篇"><a href="#python小课堂16-函数篇" class="headerlink" title="python小课堂16 - 函数篇"></a>python小课堂16 - 函数篇</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>函数篇 —— 说起函数，大家高中应该都学过类似的概念，函数指一个量随着另一个量的变化而变化，而在编程中，函数的概念则不尽相同。举个例子，比如打过dota的同学都知道，在dota中通过shift可以对英雄进行预操作，也就是当英雄还没到某一地方时，我们可以通过shift键来设定好相应的路径以及施法，来完成对英雄的提前操作，这样起到的作用就是将操作模板化。</p><p><img src="https://img-blog.csdnimg.cn/20181213123925995.gif" alt="在这里插入图片描述"></p><p>而相应的，在程序中，函数就是为了将代码进行模板化管理，它可以实现一些特定功能的小方法或是小程序。而在python小课堂之前的介绍中，其实就已经介绍过不少python自带的函数了，比如print()、max()、ord()等。。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>通常在python中，我们可以类似下面的写法去定义一个函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_hello</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello '</span> <span class="token operator">+</span> words<span class="token punctuation">)</span>print_hello<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> hello world!</code></pre><p>def作为python中的关键标识字，全拼define 定义的意思，后面的print_hello作为函数的名称，小括号里面可以传入不同的参数，以便外面调用时将参数传入。想后面的print_hello(‘world!’)就是将’world!’ 传入到print_hello中。</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p><strong>1. 形参和实参</strong></p><p>其中print_hello(words): words代表的是函数的形参，形式上的参数。</p><p>其中print_hello(‘world!’)： ‘world!’代表的是函数的实参，即实际的参数。</p><p><strong>2. 必须参数和关键字参数</strong></p><p>想象一个实际场景，当我们在计算减法算数的时候，需要你手写一个函数，传入x,y并且将最终相加的结果打印出来。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    sub <span class="token operator">=</span> x <span class="token operator">-</span> y    <span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>sub<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span></code></pre><p>调用add函数时，传入的1,2称之为必须参数，也就是实参，传入时是有顺序的，所以我们最终结果得到的是1，但是如果我们把sub(2,1)改成了sub(1,2)最终得到的结果就是-1，有没有一种方法依然可以得到1呢？此时使用关键字参数即可实现。忽略实际参数传入时的顺序，写法如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    sub <span class="token operator">=</span> x <span class="token operator">-</span> y    <span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>sub<span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span></code></pre><p>可以看到，在传入实参时，我们可以指定对应的函数形参值，进行传入对应的值，来达到无序传入。关键字参数在一些源码中是经常被用到的！</p><p><strong>3. 默认参数</strong></p><p>场景更新一下！比如现在需要我们求一个半径默认为1的圆形面积，半径可以通过外界因素进行改变，请设计出对应的函数。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">circle_area</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    area <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r    <span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span>circle_area<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3.14</span></code></pre><p>默认参数就是在形参处写好一个默认值，若调用时没有传入值，则变量会取默认值。再来看下如果传入值会发生什么？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">circle_area</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    area <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r    <span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span>circle_area<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">31.400000000000002</span></code></pre><p>可以看到外面调用10时，将形参r=1覆盖掉了，最终算出来的结果以r=10为准。</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>函数的返回值：通过return关键词来进行返回，当我们调用函数时，可以将函数的处理结果返回到调用处，来看一个加法的函数例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> sumresult <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2018121312421964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果什么add函数不写return值呢？来看下结果：</p><p><img src="https://img-blog.csdnimg.cn/20181213124228993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上面的例子可以看到，python函数默认return值为None，而#代表的是注释，在代码中起到的作用是解释当前代码的意思，是写给人看的，并不执行。同样的#只能注释一行，要想注释多行可以使用 ‘’’ 你的代码 ‘’’，”””  你的代码 “””  ,也就是所谓的三双引号和三单引号。如下：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''def add(x, y):    sum = x + y    return sum'''</span><span class="token triple-quoted-string string">"""result = add(1, 3)print(result)"""</span></code></pre><p>return关键词在函数中也代表这停止的意思，也就说在函数中如果遇到return，那么return后面的代码不会进行执行。如下：</p><p><img src="https://img-blog.csdnimg.cn/20181213124253919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="python的序列解包"><a href="#python的序列解包" class="headerlink" title="python的序列解包"></a>python的序列解包</h3><p>在python的函数中，返回值是可以有多个值的，比如现在有一个场景，让你去超市买水果，然后你花钱买到了苹果和香蕉。我用简单的函数代码来演示下：</p><p><img src="https://img-blog.csdnimg.cn/20181213124308774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> money <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>        fruit_a <span class="token operator">=</span> <span class="token string">'banana'</span>        fruit_b <span class="token operator">=</span> <span class="token string">'apple'</span>        <span class="token keyword">return</span> fruit_a<span class="token punctuation">,</span> fruit_bfruit <span class="token operator">=</span> buy<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'通过元组索引得到的值：{fruit[0]}, {fruit[1]}'</span><span class="token punctuation">)</span>banana<span class="token punctuation">,</span> apple <span class="token operator">=</span> buy<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'通过解包得到的值:{banana}, {apple}'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> 通过元组索引得到的值：banana<span class="token punctuation">,</span> apple<span class="token operator">>></span><span class="token operator">></span> 通过解包得到的值<span class="token punctuation">:</span>banana<span class="token punctuation">,</span>apple</code></pre><p>可以看到，如果我们去超市买水果，身上带了大于10块钱的钱，那么我就可以同时买到苹果和香蕉，同时函数将两个值一起返回，得到的是元组，在调用时解析时，可以直接对元组进行解包操作，直接定义对应变量的名称即可！推荐用解包形式去得到函数多个返回值，因为逻辑非常清晰！</p><h3 id="你不知道的python小知识点"><a href="#你不知道的python小知识点" class="headerlink" title="你不知道的python小知识点"></a>你不知道的python小知识点</h3><p><strong>1.python的系统递归参数</strong></p><p>现在有一个场景，请你实现打印一句话hello！并且在函数内部调用自己本身。代码实现如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_hello</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  print_hello<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>print_hello<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181213124347471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到报错了！错误中文大概意思是递归错误，超过最大递归深度。最大深度就是屏幕上的993次。</p><blockquote><p>Tips：<br>递归 —&gt; 递归的意思就是函数本身自己调用自己。比如上面的例子中，在print_hello函数中又调用了自己，所以python就会一直执行下去，但是python自身有检测递归函数的机制，所以如果你写了一个死循环这样的递归，它会直接进行最大次数的尝试并且报错。常见的错误：在程序中若写了一个死循环递归方法，最终报错的信息则是：MemoryError: stack overflow，也就是常说的栈内存溢出。</p></blockquote><p>拓展知识：</p><p>在上一节中，我曾经说过一个python自带的包，叫做sys。通过sys可以来设定递归函数的最大深度。请看下面的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_hello</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  print_hello<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>print_hello<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span></code></pre><p><strong>2. python的链式赋值</strong><br>在python中，是支持链式赋值的，什么是链式呢？就是类似将元素串起来形成一个链子一样。如下：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></code></pre><p><strong>3. “序列解包”赋值</strong></p><p>道理和上面讲过的序列解包差不多：</p><pre class=" language-python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span></code></pre><p>至此完！ </p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂15 - 史上最详细的包和模块import讲解篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-15-shi-shang-zui-xiang-xi-de-bao-he-mo-kuai-import-jiang-jie-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-15-shi-shang-zui-xiang-xi-de-bao-he-mo-kuai-import-jiang-jie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂15-史上最详细的包和模块import讲解篇"><a href="#python小课堂15-史上最详细的包和模块import讲解篇" class="headerlink" title="python小课堂15 - 史上最详细的包和模块import讲解篇"></a>python小课堂15 - 史上最详细的包和模块import讲解篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在大量的代码设计中，我们不可能将所有代码都写在一个.py文件，所以有了<strong>包、模块</strong>，而为了代码可以重复利用(复用性)，就有了<strong>类、函数</strong>的概念。类和函数在下次介绍。</p><h3 id="python中的包"><a href="#python中的包" class="headerlink" title="python中的包"></a>python中的包</h3><p>python中的包，对应到计算机中，可以理解为文件夹，但是文件加下必须有一个名为<strong>init</strong>.py的文件，若没有此文件，python则会认为其只是一个普通的文件夹。</p><p>打开pycharm，创建一个包，如下：<br><img src="https://img-blog.csdnimg.cn/20181210123807417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210123815786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="python中的模块"><a href="#python中的模块" class="headerlink" title="python中的模块"></a>python中的模块</h3><p>python中的模块就非常好理解了，实际上，之前所有的.py文件，我们都可以称之为一个模块。单独的一个py文件就是一个模块。</p><p><img src="https://img-blog.csdnimg.cn/20181210123829279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2018121012383667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>test1和test2不同区别就是test2是和package这个包是同级目录，而test1是属于package包的。</p><p>再来看下总的概念：</p><p><img src="https://img-blog.csdnimg.cn/20181210123848575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="包和模块的引入"><a href="#包和模块的引入" class="headerlink" title="包和模块的引入"></a>包和模块的引入</h3><p><strong>1.<font color="gree">模块处于同级目录</font>（<font color="red">并且不在包下 </font>）</strong></p><p>当我们想在一个模块中使用另一个模块中的变量时，如何操作呢？test2、test3处于同一级目录。<br><img src="https://img-blog.csdnimg.cn/20181210124000740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我想在test3中引入test2的变量，test2.py中有个变量a = 2。<br><img src="https://img-blog.csdnimg.cn/2018121012401058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210124020703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210124026701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上所示,只需要在当前模块，用import语句，即可导入模块，具体使用的时候需要用模块的名字.变量。</p><p><strong>import 后面必须是模块的名称！ ——&gt; import modul name</strong></p><p>还有一种写法如下图pycharm中：<br><img src="https://img-blog.csdnimg.cn/20181210124046820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上所示,只需要在当前模块，     <strong>from 模块名字 import  变量</strong>     </p><p>2.<strong><font color="gree">模块处于同级目录</font>（<font color="red">在同一包下</font>）</strong></p><p>来看下，test1，test4都属于package包下的模块。</p><p><img src="https://img-blog.csdnimg.cn/20181210124146679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>test1.py中有着字符串a = ‘I am success!’<br><img src="https://img-blog.csdnimg.cn/20181210124156272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在test4.py中引用test1.py中的a，如何引用呢？</p><p>可以看到如下：<br><img src="https://img-blog.csdnimg.cn/20181210124206523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">关键语法：<span class="token keyword">import</span> 包名<span class="token punctuation">.</span>模块名 <span class="token keyword">as</span> 别名</code></pre><p><font color="red">但是！！！！！！！如果我们脱离pycharm，找到本机相应的python目录，通过cmd来运行下，看下效果如何：</font></p><p><img src="https://img-blog.csdnimg.cn/20181210124239555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210124245133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以清晰的看到上图，通过命令行模式执行就会报错！错误显示模块没有被找到：没有模块叫’package’。这是为什么呢？在pycharm中通过右键run as运行test4，可以看到控制台成功输出，而本地调用命令行的形式就报错了！</p><p>打开pycharm的setting，搜索 python console，右侧其中有一项，add content roots to pythonpath，默认pycharm是勾选上此项的。此项的意思是将内容的根路径加到python的环境变量路径下。<br><img src="https://img-blog.csdnimg.cn/20181210124259646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上图下面代码块里写着一堆代码，正是这段代码，我们才可以在pycharm中正确运行。</p><p>我们可以在test1.py里来看下sys.path，顺便打印看下结果。<br><img src="https://img-blog.csdnimg.cn/2018121012431271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>pycharm控制台输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'F:\\pycharm\\python14\\package'</span><span class="token punctuation">,</span> <span class="token string">'F:\\pycharm\\python14'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\python36.zip'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\DLLs'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Users\\sy\\AppData\\Roaming\\Python\\Python36\\site-packages'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages\\win32'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages\\win32\\lib'</span><span class="token punctuation">,</span><span class="token string">'D:\\python3.6\\lib\\site-packages\\Pythonwin'</span><span class="token punctuation">]</span></code></pre><p>实际通过命令行输出，应该没有’F:\pycharm\python14’ 这一项，因为这一项是pycharm中setting自动加上的！</p><p>实际控制台输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'F:\\pycharm\\python14\\package'</span><span class="token punctuation">,</span><span class="token string">'D:\\python3.6\\python36.zip'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\DLLs'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Users\\sy\\AppData\\Roaming\\Python\\Python36\\site-packages'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages\\win32'</span><span class="token punctuation">,</span> <span class="token string">'D:\\python3.6\\lib\\site-packages\\win32\\lib'</span><span class="token punctuation">,</span><span class="token string">'D:\\python3.6\\lib\\site-packages\\Pythonwin'</span><span class="token punctuation">]</span></code></pre><p>sys.path是一个list。默然情况下python导入文件或者模块的话，他会先在sys.path里找模块的路径。如果没有的话，程序就会报错。可以看到，sys路径下有package的包名，而没有test4.py中引用test1.py模块。</p><p>而pycharm能够成功运行，正是因为它已经帮我们把项目的根路径添加到了python的环境变量中。所以我们仿照其类似写法也可以完成！</p><p>解决方案：</p><p>这里不得不说几个重要的python自带模块了，如下：</p><p>① </p><p><code>__file__   : python模块自身的名称</code><br>pycharm打印下<strong>file</strong>:</p><p>可以看到pycharm会将模块的绝对路径输出到控制台上。</p><p><img src="https://img-blog.csdnimg.cn/2018121012441778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在用命令行执行下看看：</p><p><img src="https://img-blog.csdnimg.cn/20181210124428327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>python额外小知识：可以看到上图有一个<strong>pycache</strong>的文件夹，这个文件夹在pycharm的目录中，我们是看不到的，那么此文件夹的意义何在呢？点进去看下：</p><p><img src="https://img-blog.csdnimg.cn/20181210124438969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Python程序运行时不需要编译成二进制代码，而直接从源码运行程序，简单来说是，Python解释器将源码转换为字节码，然后再由解释器来执行这些字节码。而解释器的具体工作：<br>1、完成模块的加载和链接。<br>2、将源代码编译为PyCodeObject对象(即字节码)，写入内存中，供CPU读取。<br>3、从内存中读取并执行，结束后将PyCodeObject写回硬盘当中，也就是复制到.pyc或.pyo文件中，以保存当前目录下所有脚本的字节码文件。<br>4、若再次执行该脚本，它先检查【本地是否有上述字节码文件】和【该字节码文件的修改时间是否在其源文件之后】，是就直接执行，否则重复上述步骤。<br>第一次执行代码的时候，Python解释器已经把编译的字节码放在<strong>pycache</strong>文件夹中，这样以后再次运行的话，如果被调用的模块未发生改变，那就直接跳过编译这一步，直接去<strong>pycache</strong>文件夹中去运行相关的 *.pyc 文件，大大缩短了项目运行前的准备时间。<br>CSDN来源：<br><a href="https://blog.csdn.net/index20001/article/details/73501375" target="_blank" rel="noopener">https://blog.csdn.net/index20001/article/details/73501375</a></p></blockquote><p>继续回归正题：</p><p>②</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span>os   ：  sys ，os模块是python系统自带模块os模块： operate system 操作系统的意思，一般可以通过调用此模块来对系统进行相关操作sys 模块： system 系统的意思，通过此模块来实现对python自定义包和模块的导入</code></pre><p>有了以上两个知识点，我们可以对test4.py进行如下操作：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span>os<span class="token keyword">print</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>因为pycharm会对<strong>file</strong>进行路径补充，所以我们用命令行来执行test4.py：</p><p><img src="https://img-blog.csdnimg.cn/20181210124554768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上图结果：</p><pre class=" language-python"><code class="language-python">__file__             模块名字test4<span class="token punctuation">.</span>py           os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>     模块名字的绝对路径F<span class="token punctuation">:</span>\pycharm\python14\package\test4<span class="token punctuation">.</span>pyos<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>    模块的包名绝对路径F<span class="token punctuation">:</span>\pycharm\python14\packageos<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>F<span class="token punctuation">:</span>\pycharm\python14                           项目本身的绝对路径</code></pre><p>通过最后一步，我们可以将项目本身的路径直接拼入python的sys下</p><pre class=" language-python"><code class="language-python">base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span></code></pre><p>验证究竟有没有加到我们的python环境变量中，最终代码为：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span></code></pre><p>通过命令行执行来看下：<br><img src="https://img-blog.csdnimg.cn/20181210124648899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>有了以上的所有操作步骤，我们可以完美的将test1.py的a变量引入test4.py中了！来看下命令执行：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> osbase_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>                            os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  sys拼接 一定要在自定义包引入之前定义   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">import</span> package<span class="token punctuation">.</span>test1 <span class="token keyword">as</span> test1       注意<span class="token keyword">import</span>的顺序。<span class="token keyword">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span>a<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181210124708623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>成功！</p><p>写到这里涉及的知识点就已经这么多了。。。继续写。。。</p><p><strong>3.<font color="gree">包处于同级目录</font>（<font color="red">包和包同级，包1下的模块引入包2下的模块变量</font>）</strong></p><p><img src="https://img-blog.csdnimg.cn/20181210124753365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到，通过from test3 import c，pycharm中是正常输出的，控制台是报错的！原因实际和“<strong>2.模块处于同级目录（在同一包下）</strong>”的解释是一样的，只需要在引入自定义包之前，将我们项目的根路径加到python的系统变量中即可。</p><p><strong>4.<font color="gree">模块处于不同级目录</font>（<font color="red">包和模块同级，模块引入包下模块的变量</font>）</strong><br><img src="https://img-blog.csdnimg.cn/2018121012483582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210124841333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181210124850552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>若属于3的情况，可以看到，不需要对python系统进行sys.append，可以正常使用import 或者 from 语句进行导入。</p><p><strong>5.<font color="gree">模块处于不同级目录</font>（<font color="red">包和模块同级，包下模块引入与包模块同级的变量</font>）</strong></p><p>test3.py 中有：<br><code>c = 123455666</code><br>在packeage下的test1.py调用：<br><img src="https://img-blog.csdnimg.cn/2018121012495237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到，通过from test3 import c，pycharm中是正常输出的，控制台是报错的！原因实际和“2.模块处于同级目录（在同一包下）”的解释是一样的，只需要在引入自定义包之前，将我们项目的根路径加到python的系统变量中即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> osbase_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span><span class="token keyword">from</span> test3 <span class="token keyword">import</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181210125012291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="模块之前的相对引入"><a href="#模块之前的相对引入" class="headerlink" title="模块之前的相对引入"></a>模块之前的相对引入</h3><p>什么叫相对引入呢？相对路径大家可能听说过，相对引入和相对路径是一个道理的，比如 .代表的是当前目录，..代表的是上级目录,此处的写法就是相对路径，相对于某个文件来说，即相对！</p><p>实际上，在<strong>2.模块处于同级目录（在同一包下）中</strong>，还有一种相对引入的写法，但是对于test4.py引入test1.py来说，不能直接运行test4.py，否则会报错。来看下：<br><img src="https://img-blog.csdnimg.cn/20181210125051768.png" alt="在这里插入图片描述"></p><p>test1.py中有个a字符串：</p><pre class=" language-python"><code class="language-python">test1<span class="token punctuation">.</span>pya <span class="token operator">=</span> <span class="token string">'I am success !'</span></code></pre><p>test4.py中，我用from .test1 import a来引入test1.py的变量a，注意，包下同级目录，我使用的是.test1  ！！！！</p><pre class=" language-python"><code class="language-python">test4<span class="token punctuation">.</span>py<span class="token keyword">from</span> <span class="token punctuation">.</span>test1 <span class="token keyword">import</span> ab <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">'I am test4.py import .test1'</span></code></pre><p>如果此时我直接将test4.py运行，并且打印b，就会报错！</p><p><img src="https://img-blog.csdnimg.cn/20181210125131313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">ModuleNotFoundError<span class="token punctuation">:</span> No module named <span class="token string">'__main__.test1'</span><span class="token punctuation">;</span> <span class="token string">'__main__'</span> <span class="token keyword">is</span> <span class="token operator">not</span> a package</code></pre><p>如果此时，我通过test2.py间接行调用test4.py中的b</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> package<span class="token punctuation">.</span>test4 <span class="token keyword">import</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>无论是pycharm还是命令行，都是有成功运行的：</p><p><img src="https://img-blog.csdnimg.cn/20181210125222499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>也就是说python对于相对引入来说，主动引入的函数不能作为主体去运行！</p><h3 id="pycharm中可能会遇到的import报错"><a href="#pycharm中可能会遇到的import报错" class="headerlink" title="pycharm中可能会遇到的import报错"></a>pycharm中可能会遇到的import报错</h3><p>有人可能会遇到，当一个新项目导入到pycharm中，python代码的import有可能会报错，可以将项目设置为根路径，这样import错误即可消失，操作如下：<br><img src="https://img-blog.csdnimg.cn/20181210125243291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="包和模块自身的额外小知识点"><a href="#包和模块自身的额外小知识点" class="headerlink" title="包和模块自身的额外小知识点"></a>包和模块自身的额外小知识点</h3><ol><li>关于包下的 <strong>init</strong>.py</li></ol><p>init,中文意思是初始化的意思，而<strong>init</strong>.py实际上就是作为包名来配合的，当我们调用一个包时，第一步python就会去调用<strong>init</strong>.py模块，所以，经常我们可以将包下的<strong>init</strong>.py中放入一些需要初始化的操作。</p><p>举个例子：<br><img src="https://img-blog.csdnimg.cn/20181210125258811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">__init__<span class="token punctuation">.</span>py<span class="token punctuation">:</span>init_a <span class="token operator">=</span> <span class="token string">'I am __init__.py'</span><span class="token keyword">print</span><span class="token punctuation">(</span>init_a<span class="token punctuation">)</span></code></pre><p>在package包下定义了初始化的字符串。<br>而test2.py调用package下的test1.py中的a变量时：</p><pre class=" language-python"><code class="language-python">test2<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token keyword">from</span> package<span class="token punctuation">.</span>test1 <span class="token keyword">import</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test1<span class="token punctuation">.</span>py<span class="token punctuation">:</span>a <span class="token operator">=</span> <span class="token string">'I am success !'</span></code></pre><p>可以看到下图运行结果,先输出了初始化模块中的字符串:</p><p><img src="https://img-blog.csdnimg.cn/20181210125334835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>关于模块中的限定变量写法</li></ol><p>依然是test2.py引入test1.py的变量：<br><img src="https://img-blog.csdnimg.cn/20181210125353559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">test2<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token keyword">from</span> package<span class="token punctuation">.</span>test1 <span class="token keyword">import</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>test1<span class="token punctuation">.</span>py<span class="token punctuation">:</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token string">'I am success !'</span>b <span class="token operator">=</span> <span class="token string">'I am fail !'</span>c <span class="token operator">=</span> <span class="token string">'I am fuc***  you!!! !'</span></code></pre><p>在test2中引入test1通过import单独引入三个变量，运行结果：</p><p><img src="https://img-blog.csdnimg.cn/20181210125409237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>若将import 后面改成* ，则会限制变量。</p><p><img src="https://img-blog.csdnimg.cn/20181210125426159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>而此处所说，就是因为在test1.py中有着<strong>all</strong> = []  ,这样的写法可以限定住import <em> 的限制，test4.py import </em>时，则会被限制住骂人的语句！</p><h3 id="import-模块的万金油方法"><a href="#import-模块的万金油方法" class="headerlink" title="import 模块的万金油方法"></a>import 模块的万金油方法</h3><p>上面说了这么多种情况，如果你实在是记不住，那么请记住一点，万金油的import方式，就是在你所有模块的入口模块处，以下面代码为例，将你项目本身的绝对路径拼入到python 的系统path下，<strong><font color="red">这样自定义的包一定不会出错！！！</font></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> osbase_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>                            os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂14 - 代码编辑器PyCharm篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-14-dai-ma-bian-ji-qi-pycharm-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-14-dai-ma-bian-ji-qi-pycharm-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂14-代码编辑器PyCharm篇"><a href="#python小课堂14-代码编辑器PyCharm篇" class="headerlink" title="python小课堂14 - 代码编辑器PyCharm篇"></a>python小课堂14 - 代码编辑器PyCharm篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>古人云：工欲善其事必先利其器！写代码也一样，虽然好多人都说，初学者不推荐使用很高大上，智能，自动化的编辑器，但是我想说：“强大的，智能的东西为什么就不推荐新手用呢？！！”我自学java的时候，也直接用的是eclipse写代码，而非网上好多人说的用什么txt文本编辑。用txt文本写代码的初衷是熟悉语法，自己对着相关文档巧罢了，效率极低，还容易出错，很容易对新手造成学不下去的恐惧与困扰，所以我推荐初学代码，该用智能的，就用智能的！至于熟不熟悉代码，敲多了自然就熟悉了！步入正题，今天推荐的编辑器就是 ——–&gt; PyCharm(自带代码提示，检查语法，以及调试功能的编辑器)。此款也是JetBrains公司出的，在2016年的时候，这家公司掀起了新时代代码编辑器的热潮，他家出的编辑器都超级好用的伐！！！堪称智能的一B。。。。下面就来介绍下PyCharm的安装与配置，方面后续介绍函数和模块的概念。</p><h3 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h3><p>1.给出官网链接：<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">http://www.jetbrains.com/pycharm/</a></p><p><img src="https://img-blog.csdnimg.cn/20181201141001179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.点击专业版的进行下载！功能多，教你如何破解它！永久免费。。。</p><p><img src="https://img-blog.csdnimg.cn/20181201141011162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.点击完稍等片刻，我家网是50M的光纤，但是下载速度并不乐观呀，估计是外国服务器的原因。。。</p><p><img src="https://img-blog.csdnimg.cn/20181201141020752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>借着等待下载的时间，普及一个网络小常识吧！平时我们说到的50M的网速，100M的网速，实际上网速的单位是 bit/s，也就是一秒走了多少bit。50M bit/s，在网络中数据流的单位是一秒内传输了50M的bit。然后1byte=8bit，1MB=1024KB，1KB = 1024 Byte ，你想算出1s中最大的下载速度，单位按照流量来算的话就是50除以8，得到6.25MB/s(理论值)。实际上公式是： 50 <em>1024 </em>1024/8 ，单位是 byte，换算回去的话就是直接用50/8即可。</p><p>4.安装PyCharm，windows大多都是无脑一步又一步进行安装即可，说下需要注意的点。</p><p>① 点击next<br><img src="https://img-blog.csdnimg.cn/20181201141038145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>② 选择对应安装路径</p><p><img src="https://img-blog.csdnimg.cn/20181201141047350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>③ 出现选项卡</p><p>第一项是创建桌面快捷方式，32位或者64位。</p><p>第二个是对以.py为后缀的文件是否关联pycharm，勾上就是默认通过pycharm打开.py文件。</p><p>第三个是会自动下载安装JetBrains版的jre环境。</p><p><img src="https://img-blog.csdnimg.cn/20181201141059357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>推荐勾选方式：</p><p>64位，.py勾不勾看心情，最后一项一定要勾，因为pycharm基于java实现，需要jre环境才能运行。我这里勾选如下：</p><p><img src="https://img-blog.csdnimg.cn/20181201141118373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>④ 勾完一路next ，install 即可，进入下面界面，等待下载和安装：</p><p><img src="https://img-blog.csdnimg.cn/20181201141131963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑤ 安装完毕后，打开桌面上的快捷方式。选择第二个，OK即可。</p><p><img src="https://img-blog.csdnimg.cn/20181201141140399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>右侧滚动条，拖到最底下，然后accept。</p><p><img src="https://img-blog.csdnimg.cn/2018120114115030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>问你是否需要数据共享，看你心情，随意选。我选的不发送，Don’t send.</p><p><img src="https://img-blog.csdnimg.cn/20181201141159499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Pycharm默认主题是黑色，写python代码黑色很炫酷，默认即可，点击右下角Next：Featured Plugins。<br><img src="https://img-blog.csdnimg.cn/20181201141209854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一些可选的插件，安装与否都可以，后续也可以自己安装，右下角Start using Pycharm。</p><p><img src="https://img-blog.csdnimg.cn/20181201141223147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="破解PyCharm专业版"><a href="#破解PyCharm专业版" class="headerlink" title="破解PyCharm专业版"></a>破解PyCharm专业版</h3><p>重头戏来了！！可以看到当点完上述设置后，进入下图，开始找你要序列号版权之类的信息了！！！</p><p><img src="https://img-blog.csdnimg.cn/20181201141254926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们到这里先点击Exit，退出PyCharm…….</p><p>① 进入此网站 ：<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a>  ，下载破解补丁，不到1MB。</p><p><img src="https://img-blog.csdnimg.cn/20181201141308926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>② 将补丁放到pycharm的bin目录下。</p><p><img src="https://img-blog.csdnimg.cn/20181201141318619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>③ 编辑这两个文件的内容：</p><p><img src="https://img-blog.csdnimg.cn/20181201141326925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>原本显示应该是pycharm.exe.vmoptions和pycharm64.exe.vmoptions，因为我用记事本打开了，所以改变了图标显示。</p><p>打开pycharm.exe.vmoptions，尾行追加：</p><p>-javaagent:C:\Program Files\JetBrains\PyCharm 2018.2.4\bin\JetbrainsCrack-3.1-release-enc.jar</p><p><strong>一定要改成你自己对应的破解补丁路径！</strong></p><p><img src="https://img-blog.csdnimg.cn/20181201141345917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>pycharm64.exe.vmoptions同上。</p><p><img src="https://img-blog.csdnimg.cn/20181201141354439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>④ 打开<a href="http://idea.lanyus.com/，点击获取注册码：" target="_blank" rel="noopener">http://idea.lanyus.com/，点击获取注册码：</a></p><p><img src="https://img-blog.csdnimg.cn/20181201141403192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑤ 打开你的pycharm，选择Activation code，粘贴④中注册码，点击Activate</p><p><img src="https://img-blog.csdnimg.cn/20181201141411675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑥ 激活成功，2100年，虽然网站上说激活码会失效，到时候大家看看使用吧，若没失效，切忌别自己更新pycharm版本，继续用就好了，若失效了，在安装本篇文章来一遍即可。</p><p><img src="https://img-blog.csdnimg.cn/20181201141420471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="PyCharm配置python环境"><a href="#PyCharm配置python环境" class="headerlink" title="PyCharm配置python环境"></a>PyCharm配置python环境</h3><p>① 创建新项目</p><p><img src="https://img-blog.csdnimg.cn/20181201141432270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>② 选择Pure Python，纯python脚本，Location修改脚本放置路径，点Create.</p><p><img src="https://img-blog.csdnimg.cn/20181201141441349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>③ 去掉在启动开启提示，都是一些pycharm的小技巧，有兴趣可以看看。</p><p><img src="https://img-blog.csdnimg.cn/20181201141449772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>④ 配置主题，以及相关设置。</p><p>早期我选择了默认的黑色版，不知道为什么是白色背景，现在来配置下。</p><p><img src="https://img-blog.csdnimg.cn/20181201141502169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击File —-&gt; Settings。 打开设置的快捷键是Ctrl + Alt + S。</p><p>现在是IntelJ IDEA设置，默认白色，我们将其选成Darcula，就非常有python气氛了，点击OK。</p><p><img src="https://img-blog.csdnimg.cn/20181201141512150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181201141517661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>设置下字体，搜索Font，在Editor下，我目前用的是Consola，字体大小18。看着比较顺眼，适合编程。。。</p><p><img src="https://img-blog.csdnimg.cn/20181201141525681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑤ 创建一个python文件，右键PycharmProject目录即可。</p><p><img src="https://img-blog.csdnimg.cn/20181201141533168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181201141538672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑥ 配置python环境对应的解释器</p><p>python环境之前的小课堂有讲过如何安装，现在是需要将python与pycharm进行关联，这样pycharm才可以直接调用python来运行代码。</p><p>打开设置，左上方搜索interpreter(解释器的意思)，右侧选择你本地对应之前安装的python，最后别忘了点OK。</p><p><img src="https://img-blog.csdnimg.cn/20181201141548980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑦ 书写一个Hello World，并且运行！</p><p><img src="https://img-blog.csdnimg.cn/20181201141600676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⑧ 看到控制台输出：</p><p><img src="https://img-blog.csdnimg.cn/20181201141610770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>终于写完了……..这怕是史上最详细的Pycharm安装教程了吧！！！ </p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂13 - 流程控制语法篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-13-liu-cheng-kong-zhi-yu-fa-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-13-liu-cheng-kong-zhi-yu-fa-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂13-流程控制语法篇"><a href="#python小课堂13-流程控制语法篇" class="headerlink" title="python小课堂13 - 流程控制语法篇"></a>python小课堂13 - 流程控制语法篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ε=(´ο｀*)))唉，上篇文章写的软文，即使分享了朋友圈。。。发现阅读量也不是那么大呀，对比了下隔壁的那位老大哥，人家分享朋友圈就70+的阅读量。。。还是鸡汤文！算了，我还是踏踏实实写我的技术吧~今天继续python小课堂的知识分享。今天要介绍的是python中的程序控制关键词，也就是条件，以及python的包、模块的概念。</p><h3 id="条件控制、循环控制"><a href="#条件控制、循环控制" class="headerlink" title="条件控制、循环控制"></a>条件控制、循环控制</h3><p>在步入正题之前，先来阐述一个概念 — 表达式(运算符 和 操作数所构成的)。</p><p>它长什么样子呢？如下：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>a <span class="token operator">></span> b</code></pre><p>而现在写的代码，就是用类似上面的表达式所构成的，我们可以通过条件控制，循环控制来使代码形成具有逻辑的体系。</p><p>打开IDEL，按下<strong>Ctrl + n</strong>打开文本编辑器，后续设计到代码块的格局。或者点击idle的File — &gt; New File 也是一样的。</p><h5 id="1-条件控制-if-，if-else，-if-elif"><a href="#1-条件控制-if-，if-else，-if-elif" class="headerlink" title="1.条件控制  (if ，if  else， if elif)"></a>1.条件控制  (if ，if  else， if elif)</h5><p>之前一直说过的，计算机世界中实际上映射了现实生活中的例子！在现实生活中，举个例子：如果我当年好好学习，那么我现在早就是大神了！这样的话语就是条件控制，当然现实世界并不存在如果，说多了如果都是侥幸心理罢了。</p><p>if代表的就是如果。</p><p><img src="https://img-blog.csdnimg.cn/20181129122749846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>需要注意的是：Python 不想其他语言通过{}来控制代码的作用域，在之前的小课堂就说过，写代码时通过4空格来控制！</p><p>如果条件为真，就走条件里的内容，否则就走其它的条件里的内容，else就是其它的意思。</p><p>if - else:</p><p><img src="https://img-blog.csdnimg.cn/20181129122805471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>if - elif：</p><p><img src="https://img-blog.csdnimg.cn/20181129122815315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>给个经常用到的小例子吧，不要小瞧if - else！我们生活中的各种账号登录，可以来写一个小程序看看：</p><p><img src="https://img-blog.csdnimg.cn/20181129122823582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>要说明的是，我上面的截图中，有一点是不符合python官方规范的！赋值的前两步骤，是两个恒定不变的字符串，这样的东西在编程中称之为<strong>常量</strong>！常量正规写法<strong>应该大写</strong>！所以下面我修改了….</p><p>代码本文版：</p><pre class=" language-python"><code class="language-python">CORRECT_USER <span class="token operator">=</span> <span class="token string">'sssyyy'</span>CORRECT_PASSWORD <span class="token operator">=</span> <span class="token string">'123456'</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入登录的用户名:\n'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入登录的密码:\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> CORRECT_USER <span class="token operator">==</span> username <span class="token operator">and</span> CORRECT_PASSWORD <span class="token operator">==</span> password <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆成功了！'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误！'</span><span class="token punctuation">)</span></code></pre><p>通过上面的小程序，将前几章的小知识串联起来了一部分。通过if来判断是否登录成功，有变量的赋值操作，还有 and 、== 操作符，以及input()这样的python自带方法。</p><p>  <img src="https://img-blog.csdnimg.cn/20181129122905538.png" alt="在这里插入图片描述"><br>所以当我们输入1的时候，实际上进去的是字符串类型，这也是为什么我小程序中是将字符串赋值给了变量。</p><h5 id="2-循环控制-while-，for-…-in-，continue，break"><a href="#2-循环控制-while-，for-…-in-，continue，break" class="headerlink" title="2. 循环控制   (while  ，for …  in ，continue，break)"></a>2. 循环控制   (while  ，for …  in ，continue，break)</h5><p>循环控制：依然是以现实生活中举例子吧，有些朋友们一定听说过暴力破解，在登录某些网站时，通过不断对其密码的排列组合进行登录，也就是所谓的穷举。每登录一次，换一次密码组合尝试，最终达到对比出正确的密码进行登录。而这种思想，就是在循环控制下实现的。</p><p>while中文含义是在…期间。</p><p>while:</p><p><img src="https://img-blog.csdnimg.cn/2018112912292733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如何跳出呢？继续写个小例子来演示，现在有个场景，每次将变量a加2，如果当a大于10，则结束while循环。</p><p><img src="https://img-blog.csdnimg.cn/20181129122936595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Tips：<br><code>`</code>python<br>a = 1<br>print(f’当前的值为 {a}’)<br>f’{变量名字}’  —–&gt;  这样的语法是python3.6 以上的新特性，支持直接将字符串进行格式化。而不需要自己手动在后面累加。</p></blockquote><p>while - else：</p><p><img src="https://img-blog.csdnimg.cn/20181129123033951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>for ，为了的意思，for关键词在之前有介绍过，我们可以通过for来遍历序列（str、list、tuple）、字典(dict)、集合(set)这样的类型。。</p><p>for：</p><p><img src="https://img-blog.csdnimg.cn/20181129123047324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Tips：<br>print()第二个参数添加end，就是每次追加’’，而print默认追加\n换行符<br>print(‘’,end = ‘’)</p></blockquote><p>来介绍一个python中比较屌的内置方法 — &gt; range()。</p><p>range()经常与for套用在一起使用，比如现在需要循环10次，每次循环打印出数字！如何去写：</p><p><img src="https://img-blog.csdnimg.cn/20181129123114328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果每次递增2个数字，再去打印呢？</p><p><img src="https://img-blog.csdnimg.cn/20181129123122987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果我想倒过来打印呢？</p><p><img src="https://img-blog.csdnimg.cn/20181129123133376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Tips:<br>range(a,b,c)  —&gt;  a，起始的数值 ； b，结束的数值； c，步长，类似之前介绍的切片特性的步长机制！</p></blockquote><h3 id="循环控制的跳出"><a href="#循环控制的跳出" class="headerlink" title="循环控制的跳出"></a>循环控制的跳出</h3><p>在上面的while中，我介绍了通过一种“活”条件来实现跳出，那么有没有方法直接可以跳出循环控制呢！一定是有的，就是python中的关键词:<strong>break,continue</strong></p><p>break：中文意思打破，中断！是不是很通俗易懂，再循环中加上break字眼，即可中断程序。</p><p>场景：数字a初始值为1，在while循环中，每次循环加1，当a = 10时，中断程序，并且输出中断程序。(初学者可以自己去idle中尝试动手！)</p><p><img src="https://img-blog.csdnimg.cn/20181129123206659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>continue：中文有继续的意思，所以在使用循环时符合当前条件，continue后面的代码都<strong>不执行</strong>，跳过后进行继续下一次循环。</p><p>场景：数字a初始值为1，在for循环中，每次将a累加1，一共循环20次并打印输出结果，在循环第10次的时候，跳过累加，打印出当前a的值。<br><img src="https://img-blog.csdnimg.cn/20181129123219286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到现在python的流程控制也讲完了。基本上到这里如果有思路，爱动手的同学，已经可以自己开始编程了。无论学习哪种语言，重要的还是编程的思想！有了思想，无非就是需要熟悉熟悉语法罢了。来看看到现在为止，点亮了多少小图标了！</p><p><img src="https://img-blog.csdnimg.cn/20181129123241531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂12 - 运算符篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-12-yun-suan-fu-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-12-yun-suan-fu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂12-运算符篇"><a href="#python小课堂12-运算符篇" class="headerlink" title="python小课堂12 - 运算符篇"></a>python小课堂12 - 运算符篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>继续回归python小课堂！这几天状态有点不佳，本章小课堂只想上图，不想说话！看图吧…..</p><p>1.算数运算符：</p><p><img src="https://img-blog.csdnimg.cn/20181125114005805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>没什么好说的，前面基本介绍的滚瓜烂熟了。</p><p>2.赋值运算符：</p><p><img src="https://img-blog.csdnimg.cn/20181125114020612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>没什么好说的，直接看下面代码吧！</p><p><img src="https://img-blog.csdnimg.cn/2018112511403051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其余的同理，记住一点，赋值运算最终是要达到赋值的效果，也就是将计算后的结果赋值于左侧变量。上例即a。</p><p>3.赋值运算符：</p><p><img src="https://img-blog.csdnimg.cn/20181125114044986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>没什么好说的！比出来的结果是布尔类型，前面小课堂已经介绍过了！注意，能比较的不一定是数字，字符串也可以进行比较，元组、列表都是可以进行比较的，不信的话自己测试下！</p><p>4.赋值运算符：</p><p><img src="https://img-blog.csdnimg.cn/20181125114100136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个需要说下：</p><p><img src="https://img-blog.csdnimg.cn/20181125114109610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结论：is代表身份运算符，不仅仅判断的是值，还判断了变量的内存地址是否一致，只有两者都一致的时候，结果才会返回True，缺一条件返回即为False。而 == 只进行值的判断，is not 就是与is最终结果相反。</p><p>5.逻辑运算符：</p><p><img src="https://img-blog.csdnimg.cn/20181125114123396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体重点看下图！</p><p><img src="https://img-blog.csdnimg.cn/2018112511414699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.成员运算符</p><p><img src="https://img-blog.csdnimg.cn/20181125114157616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>具体重点看下图！</p><p><img src="https://img-blog.csdnimg.cn/20181125114205933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>7.位运算符</p><p><img src="https://img-blog.csdnimg.cn/20181125114217292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>位运算符都是对二进制数字进行操作的！继续看图：</p><p>按位与运算：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">2</span>      <span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">3</span>  <span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">&amp;</span> b  <span class="token number">2</span></code></pre><p>解析：</p><p>将a，b转成2进制进行计算，数列操作，个位上0&amp;1=0，十位上1&amp;1= 1。</p><p><img src="https://img-blog.csdnimg.cn/2018112511425136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>按位或运算：</p><pre class=" language-pyhton"><code class="language-pyhton">>>> a = 2      >>> b = 3  >>> a | b  3</code></pre><p>解析：</p><p>将a，b转成2进制进行计算，数列操作，个位上0|1=1，十位上1|1= 1。</p><p><img src="https://img-blog.csdnimg.cn/20181125114323617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其余的都是一个道理！</p><h3 id="额外知识点"><a href="#额外知识点" class="headerlink" title="额外知识点"></a>额外知识点</h3><p>如何判断一个变量的类型？</p><p>之前小课堂中介绍到过一个type()，例如下面：<br><img src="https://img-blog.csdnimg.cn/20181125114342176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上面的方法虽然可以对变量的类型进行判断，但python中官方推荐的方法是下图：</p><p><img src="https://img-blog.csdnimg.cn/20181125114351938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Tips：<br>提前引出对象的三个特征：id、value、type。</p></blockquote><h3 id="总结思维导图"><a href="#总结思维导图" class="headerlink" title="总结思维导图"></a>总结思维导图</h3><p>点开食用，效果更佳:</p><p><img src="https://img-blog.csdnimg.cn/2018112511441992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂11 - 变量篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-11-bian-liang-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-11-bian-liang-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂11-变量篇"><a href="#python小课堂11-变量篇" class="headerlink" title="python小课堂11 - 变量篇"></a>python小课堂11 - 变量篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上周偷了点懒，周四到周末断更了，后来思考了下，前一阵儿的更新频率达到了日日更，虽然每章小知识都很详细。。但是同学建议进度加快，emmm….然后我决定拉长更新周期，两到三天更新一次，同时相对的进度也会加快，正是因为python的基础数据类型很重要，所以我才总结的非常细致！后续的小课堂中，我认为重要的知识点依然会写的很细，而那些介绍就能看懂的知识点，简单的总结下即可了！立下一个flag，当我总结完所有python知识点时，接下来就是好玩的各种实战篇文章(例如分析微信朋友圈的数据…..)扑面而来的节奏！</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量：<br>在编程语言中有着变量的概念，而相对应的python中定义变量是一件非常容易的事情，还是老规矩，将现实生活中的例子引入计算机世界来加以解释。高中我们所学过的数学有个方程式的概念： y = x + 1<br>而这样的公式中x就是变量! 对应到python中，一个不确定的数据的命名就是变量。(看例子就瞬间理解了！)</p></blockquote><p>冲啊！IDLE：<br><img src="https://img-blog.csdnimg.cn/20181122201027878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">=</span>  <span class="token punctuation">:</span>  等号在这里不是数学上的概念。      在编程世界，<span class="token operator">=</span>代表的是赋值，理解为给python的基本数据取名字的方式即可！</code></pre><p>在编程中，变量的名称是需要注意的，一定要见名知意！尽量去用原生的英文单词去表示变量，避免用汉语拼音来命名。。。。这是编程界的忌讳！举个例子吧，我现在要定义一个叫“学习python”的变量名：</p><pre class=" language-python"><code class="language-python">错误×：xuexi_python <span class="token operator">=</span> <span class="token string">'我要学习python'</span>正确√：study_python <span class="token operator">=</span> <span class="token string">'我要学习python'</span></code></pre><blockquote><p>Tips:<br>python中，变量名称可以由字母、数字、下划线组成。其中数字不能在第一位，python自身关键字不能用于变量名。python 的变量名定义是区分大小写的！定义A和a是不一样的。</p></blockquote><p>验证：<br><img src="https://img-blog.csdnimg.cn/20181122201116906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用关键词命名的(以type为例)错误：</p><p><img src="https://img-blog.csdnimg.cn/20181122201125826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>通过print()进行查看：</p><p><img src="https://img-blog.csdnimg.cn/20181122201135711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="你不知道的变量小知识点"><a href="#你不知道的变量小知识点" class="headerlink" title="你不知道的变量小知识点"></a>你不知道的变量小知识点</h3><p>先来看个问题，有如下代码：</p><pre class=" language-python"><code class="language-python">将<span class="token number">1</span>赋值给a，再把a赋值给b，此时修改a，那么b的值是多少？<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 此处你觉得会输出什么？将列表<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>赋值给a，同理将a赋值给b，修改list下标第一个元素，列表a、b分别会是什么内容？<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'你好'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 此处你觉得会输出什么？<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 此处你觉得会输出什么？</code></pre><p>结论：<br><img src="https://img-blog.csdnimg.cn/20181122201211689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>用图解释上面两种问题：</p><p><img src="https://img-blog.csdnimg.cn/20181122201219979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第一段代码对应上图，三步，清晰明了解释了int的值操作。划重点：值不可变！</p><p><img src="https://img-blog.csdnimg.cn/20181122201229150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二段代码对应上图，三步，清晰明了解释了list的值操作。划重点：<code>值可变！</code></p><blockquote><p>Tips：<br>在python中(Java也有！其他语言也有…)，基础数据变量类型是区分值类型和引用类型的。而int、str、tuple属于值类型(内容不可变！)，list、set、dict属于引用类型(内容可修改！)。</p></blockquote><p>如何理解可变不可变?继续用实例来说明！</p><p>下面的代码，你认为会输出什么呢？之前说过字符串不可变！你觉得这样的代码正确么！</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">'python'</span></code></pre><p>实验不可变性与可变性：</p><p><img src="https://img-blog.csdnimg.cn/20181122201317734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>引入一个python新方法：</p><pre class=" language-python"><code class="language-python">id<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x是变量，通过id可以查看x对应的内存地址。</code></pre><p><img src="https://img-blog.csdnimg.cn/20181122201341181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>再来看看tuple 和 list：</p><p><img src="https://img-blog.csdnimg.cn/2018112220134942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本次小课堂主要介绍了变量的概念，以及变量的命名规范(切忌拼音用法，使用原生英语哟！)，对于变量的重点：值类型和引用类型，了解了这两点，在编程语言中是通用的知识点！通过id()可以查看相应变量的内存地址，用于判断变量是否属于同一个元素。</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂10 - 基本数据类型终篇集合和字典</title>
      <link href="/2019/08/14/python-xiao-ke-tang-10-ji-ben-shu-ju-lei-xing-zhong-pian-ji-he-he-zi-dian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-10-ji-ben-shu-ju-lei-xing-zhong-pian-ji-he-he-zi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂10-基本数据类型终篇集合和字典"><a href="#python小课堂10-基本数据类型终篇集合和字典" class="headerlink" title="python小课堂10 - 基本数据类型终篇集合和字典"></a>python小课堂10 - 基本数据类型终篇集合和字典</h2><h3 id="基础类型集合"><a href="#基础类型集合" class="headerlink" title="基础类型集合"></a>基础类型集合</h3><p>python中集合的概念就像我们高中数学学过的集合概念相似，集合英文：<code>set</code>。下面来看下集合的写法：</p><p><img src="https://img-blog.csdnimg.cn/20181120123748423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重点，说下集合的特色：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span></code></pre><p>特性：</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span>  <span class="token punctuation">:</span>   通过减号，可以将后者集合的元素从前者集合剔除。<span class="token operator">&amp;</span>  <span class="token punctuation">:</span>   通过单与符号，可以将两个集合之间通过元素组合成新的集合。<span class="token operator">|</span>  <span class="token punctuation">:</span>   通过竖线符号，可以将两个集合做并集处理，相同元素去除。</code></pre><p>创建一个空的集合操作：</p><pre class=" language-python"><code class="language-python">set<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181120123943204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Tips:<br>集合，作为python中的基础数据结构，与上一章节介绍的序列从概念上来有些特性是相反的。其一：集合中是不能存在重复元素的！可以试下{1，1，2，3}这样在idle中查看输出结果是什么！其二：集合中的元素是无序的。</p></blockquote><p>关于集合记住2个特性以及三个操作即可。</p><h3 id="基础类型字典"><a href="#基础类型字典" class="headerlink" title="基础类型字典"></a>基础类型字典</h3><p>python的基础类型—-字典，英文：<code>dict</code>。</p><p>在实际生活中，实际上对应的就是我们的字典。看下图：<br><img src="https://img-blog.csdnimg.cn/20181120124023920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>当我们使用字典时查找一个陌生的字，需要先对拼音首字母进行检索，再通过其下面的具体拼音定位到具体页数。</p><p>在python中亦是如此，dict的写法如下：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'ai'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'an'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>上面就是图片中字典对应的拼音加页数。通过<span class="token punctuation">{</span>x <span class="token punctuation">:</span> y<span class="token punctuation">}</span>这样的形式来表示字典!其中x、y是python的基础类型！在python中我们经常把x、y称之为 key <span class="token operator">-</span> value，中文键值对。</code></pre><p><font color="red"><strong>注意：dict中的key位置是不可变的基础类型，value位置可以是任意基础类型，后续小课堂中会说到不可变性。</strong></font></p><p>在idle中实验一下：</p><p>实验一：</p><p><img src="https://img-blog.csdnimg.cn/20181120124111863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>实验二：</p><p><img src="https://img-blog.csdnimg.cn/20181120124124548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>对于dict字典的操作，实际上多多注意key-value即可，日常通过key去访问value的场景比较多，应用dict的场景多为物体之间起到了映射关系，就像拼音字典的索引目录一样！</p><h3 id="基础类型终篇的总结"><a href="#基础类型终篇的总结" class="headerlink" title="基础类型终篇的总结"></a>基础类型终篇的总结</h3><p>一图胜过千言万语！接下来看下思维导图的总结：</p><p><img src="https://img-blog.csdnimg.cn/20181120124146467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点开食用，效果更佳哟！</p><h3 id="个人心声"><a href="#个人心声" class="headerlink" title="个人心声"></a>个人心声</h3><p>到这里，基本上基础数据类型算是总结完了，通过一个星期的日日更新，总结了一遍所有python的基础类型，以及涉及到的知识点，int，float，bool，str，list，tuple，dict。通过这种总结自己对基础数据类型又更深了一步了解，不管有没有人看，hhhh，收获最大的还是自己呀！</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂09 - 基本数据类型序列总结篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-09-ji-ben-shu-ju-lei-xing-xu-lie-zong-jie-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-09-ji-ben-shu-ju-lei-xing-xu-lie-zong-jie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂09-基本数据类型序列总结篇"><a href="#python小课堂09-基本数据类型序列总结篇" class="headerlink" title="python小课堂09 - 基本数据类型序列总结篇"></a>python小课堂09 - 基本数据类型序列总结篇</h2><h3 id="回顾基础数据类型"><a href="#回顾基础数据类型" class="headerlink" title="回顾基础数据类型"></a>回顾基础数据类型</h3><p>在小课堂之前的章节中，介绍python的基础类型包含了<strong>int、float、bool、str、list、tuple</strong>。那么这些基础类型里有没有相似之处呢？必然是有的，今天就来做一下总结。</p><h3 id="python的序列概念"><a href="#python的序列概念" class="headerlink" title="python的序列概念"></a>python的序列概念</h3><p>还得在小课堂07中所说到的组的概念吗？实际上在python中专业术语称之为<code>序列</code>。之前的案例中，<code>str、list、tuple</code>这三类的操作都有着相似的共同性，所以，这三种就是今天要总结的重点，也就是序列！</p><p>序列共有操作：</p><p>①获取单一元素：<br><img src="https://img-blog.csdnimg.cn/20181115223012503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过[n]下标的形式来获取前面基础类型中内容的某一元素。</p><p>②截取多个元素：<br><img src="https://img-blog.csdnimg.cn/20181115223032267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过前面介绍的切片特性，[x:y]的方式对原有内容进行截取，<code>注意</code>：切片的括号包含左侧，不包含右侧。</p><p>③ + 和 * ：<br><img src="https://img-blog.csdnimg.cn/20181115223048875.png" alt="在这里插入图片描述"></p><p>④ in 关键词用法：</p><p>此处引出一个新的python语法关键词：<code>in，中文意思 ---&gt; 包含，在</code></p><p>可以通过in来判断一个元素是否在序列中！而得到的类型是True/False ，也就是布尔类型。可以看下面的例子：<br><img src="https://img-blog.csdnimg.cn/20181115223125474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>相反的如果不包含呢？只需要加一个not就行了！是不是很<code>python</code>！如下：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">in</span> <span class="token string">'abcdefg'</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token string">'abcdefg'</span><span class="token boolean">False</span></code></pre><p>⑤序列的python方法：</p><pre class=" language-python"><code class="language-python">len<span class="token punctuation">(</span><span class="token punctuation">)</span>：将返回<span class="token punctuation">(</span><span class="token punctuation">)</span>内容中的长度max<span class="token punctuation">(</span><span class="token punctuation">)</span>：将返回<span class="token punctuation">(</span><span class="token punctuation">)</span>内容中最大的值min<span class="token punctuation">(</span><span class="token punctuation">)</span>：将返回<span class="token punctuation">(</span><span class="token punctuation">)</span>内容中最小的值</code></pre><p>len():<br><img src="https://img-blog.csdnimg.cn/20181115223212414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>max():<br><img src="https://img-blog.csdnimg.cn/20181115223225442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>min()同理max()不举例子啦，大家自己尝试即可！</p><h3 id="字符背后你不知道的知识点"><a href="#字符背后你不知道的知识点" class="headerlink" title="字符背后你不知道的知识点"></a>字符背后你不知道的知识点</h3><p><img src="https://img-blog.csdnimg.cn/20181115223450652.gif" alt="在这里插入图片描述"></p><blockquote><p>Tips:<br>每个字符背后实际上对应的ascll码。<br>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。<br>通过python自带的一个方法可以查看。</p><pre class=" language-python"><code class="language-python">ord<span class="token punctuation">(</span><span class="token punctuation">)</span>    此方法可以查看对应字母的ascll码！</code></pre><p><img src="https://img-blog.csdnimg.cn/20181115223326630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>今天的python小课堂主要介绍了序列的总结(<code>str、list、tuple</code>三剑客)，所谓的<code>序列</code>二字，重要的是<code>序</code>这个字，也就是说这三种基础类型的内容元素都是有序的，每位都可以通过自带的下标索引(索引，index，可以理解为现实生活中字典的目录栏，有了<code>索引查找</code>你想要的信息会一目了然，非常快！)来获取不同位置的值，正因为它们是有序的！</p><h3 id="个人心声"><a href="#个人心声" class="headerlink" title="个人心声"></a>个人心声</h3><p>python的基础类型介绍到现在基本要接近尾声了，虽然这些基础的python语法很枯燥，但是打好基础是非常有必要的，在未来的编程道路上，有良好的基础才可以减少代码的bug，就像盖房子一样，地基不稳，hhhh，小心楼塌啊！！</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂08 - 基本数据类型元组篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-08-ji-ben-shu-ju-lei-xing-yuan-zu-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-08-ji-ben-shu-ju-lei-xing-yuan-zu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂08-基本数据类型元组篇"><a href="#python小课堂08-基本数据类型元组篇" class="headerlink" title="python小课堂08 - 基本数据类型元组篇"></a>python小课堂08 - 基本数据类型元组篇</h2><h3 id="python中的元组"><a href="#python中的元组" class="headerlink" title="python中的元组"></a>python中的元组</h3><p>python中的元组，也是作为基础数据类型之一，英文: <code>tuple</code>。</p><p>Python的元组与小课堂上一章所介绍的列表类似，不同之处在于元组的元素<code>不能修改</code>。元组使用小括号()来表示，列表使用方括号[]来表示。</p><h3 id="动手实践元组类型"><a href="#动手实践元组类型" class="headerlink" title="动手实践元组类型"></a>动手实践元组类型</h3><p>下面看下idle中的写法：</p><p><img src="https://img-blog.csdnimg.cn/20181111210736827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上述操作，基本和列表一致！(此处不过多介绍，基础类型列表篇已经介绍！)那么问题来了？既然和列表操作一致，那么为什么python中还会有元组这样的类型呢？(想必你也有这样的疑问吧。。如果没有，你就是没有思考！！~)</p><p>此处留一悬念！后续的小课堂中会讲到！</p><p><img src="https://img-blog.csdnimg.cn/20181111210752642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到，通过type()来查看()相关类型是tuple类型的数据类型！</p><h3 id="元组你不知道的小知识点"><a href="#元组你不知道的小知识点" class="headerlink" title="元组你不知道的小知识点"></a>元组你不知道的小知识点</h3><p><img src="https://img-blog.csdnimg.cn/20181111210820667.gif" alt="在这里插入图片描述"></p><p>来谈谈你不知道的元组！请看下面的小例子：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>大家认为这两个type会输出什么呢？</p><p>emmm。。来看下！</p><p><img src="https://img-blog.csdnimg.cn/20181111210854311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>有木有很神奇！明明我创建的是元组类型啊！！~</p><p>有没有小伙伴知道这是为什么呢？欢迎留言区留言探讨呀！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于元组(tuple)的基础操作，与列表(list)，字符串(str)非常相似！聪明的你学会了吗！本节小课堂到此结束了，下期内容会将最近的知识点总结一下，敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂07 - 基本数据类型列表篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-07-ji-ben-shu-ju-lei-xing-lie-biao-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-07-ji-ben-shu-ju-lei-xing-lie-biao-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂07-基本数据类型列表篇"><a href="#python小课堂07-基本数据类型列表篇" class="headerlink" title="python小课堂07 - 基本数据类型列表篇"></a>python小课堂07 - 基本数据类型列表篇</h2><h3 id="python中组的概念？"><a href="#python中组的概念？" class="headerlink" title="python中组的概念？"></a>python中组的概念？</h3><p>在前面的小课堂中，我每介绍一个新的数据类型的概念，都会去用一个现实世界的实例来引导出新的概念，这次依然是这样，因为计算机中的一些概念就是通过现实世界的例子而映射进去的！本节课堂要说的是python中组的概念，什么是“组”？</p><p>生活中“组”的概念非常常见，我大四之前一直是一个游戏迷，就用游戏来举例说明下“组”的概念吧！</p><p>事例一：</p><p><img src="https://img-blog.csdnimg.cn/20181109125756899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>女生们最爱玩的开心消消乐。。。手动来回滑来交换位置，一旦满足横竖行相同的三个元素，则会被消除。而这三个元素，其实就是一个“组”。</p><p>事例二：</p><p><img src="https://img-blog.csdnimg.cn/20181109125839912.gif" alt="在这里插入图片描述"></p><p>英雄联盟中亚索的技能，一共四个技能QWER，加上闪现治疗DF，一共6个技能，此时这六个技能为<code>一组</code>！如果英雄就一个技能呢。。八成这游戏也没啥意思吧.</p><h3 id="python基础类型-列表-list"><a href="#python基础类型-列表-list" class="headerlink" title="python基础类型-列表(list)"></a>python基础类型-列表(list)</h3><pre class=" language-列表(list)```便是上面“组”的一种。在python中，list的写法跟上节介绍的切片写法有点像，[]。"><code class="language-列表(list)```便是上面“组”的一种。在python中，list的写法跟上节介绍的切片写法有点像，[]。">下面看下idle中的写法：![在这里插入图片描述](https://img-blog.csdnimg.cn/20181109125926476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70)###   列表的操作方法下面说下列表的各种操作方式，事例就拿亚索来说吧，假如亚索有四个技能，我们将他的四个技能用字符串来表示，并且放入列表中：```pythn['斩钢闪','风之障壁','踏前斩','狂风绝息斩']</code></pre><p>一、获取”技能”列表中的某一技能！</p><p><img src="https://img-blog.csdnimg.cn/20181109130003600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>二、给列表”技能栏”中加减乘除操作！</p><p>emmm….我们来加一下闪现和点燃技能吧：</p><p><img src="https://img-blog.csdnimg.cn/20181109130015162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>列表(list)</code>的概念本节小课堂先引出了基本概念，实际上对于list而言，还有别的一些操作，后续会慢慢介绍，不着急！通过实验我们可以看到，list中可以放入不同的数据类型，并且可以通过加法将两个已有的list进行相加，从而得到想要的大list！</p><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzAxMTM3MDk2Ng==&amp;mid=2451658779&amp;idx=1&amp;sn=0bfc5344b0c15c2e483948db549d5b94&amp;chksm=8c97d0a2bbe059b431971dd8a477aca4b19b2ed8d8b431dad0084a153b43f3dc5cdda5f33648&amp;token=1167262384&amp;lang=zh_CN#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMTM3MDk2Ng==&amp;mid=2451658779&amp;idx=1&amp;sn=0bfc5344b0c15c2e483948db549d5b94&amp;chksm=8c97d0a2bbe059b431971dd8a477aca4b19b2ed8d8b431dad0084a153b43f3dc5cdda5f33648&amp;token=1167262384&amp;lang=zh_CN#rd</a></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂06 - 基本数据类型字符串运算篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-06-ji-ben-shu-ju-lei-xing-zi-fu-chuan-yun-suan-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-06-ji-ben-shu-ju-lei-xing-zi-fu-chuan-yun-suan-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂06-基本数据类型字符串运算篇"><a href="#python小课堂06-基本数据类型字符串运算篇" class="headerlink" title="python小课堂06 - 基本数据类型字符串运算篇"></a>python小课堂06 - 基本数据类型字符串运算篇</h2><h3 id="字符串的运算"><a href="#字符串的运算" class="headerlink" title="字符串的运算"></a>字符串的运算</h3><p>就题目而言，字符串的运算？乍一看！这是什么鬼？所谓的运算，数学定义的含义就是将数字之间进行各种算法，例如加减乘除。那么字符串运算呢？同理：就是将字符串进行所谓的“加减乘除！</p><p>当然如果在字符串中获取相关对应的字符，也算是对其运算的一种方式。</p><p>例如:</p><pre class=" language-python"><code class="language-python"><span class="token string">"Hello World!  I 'm coming!"</span></code></pre><p>此字符串我想获取当中的’W’字符，如何获取呢？(具体操作看下面中的实践！)</p><p>以上的这种行为操作都算是对字符串的运算，下面来看下具体实践吧！</p><h3 id="动手实践字符串的运算"><a href="#动手实践字符串的运算" class="headerlink" title="动手实践字符串的运算"></a>动手实践字符串的运算</h3><p>打开idle，让我们实践一下：</p><p><img src="https://img-blog.csdnimg.cn/20181108125400888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上图实验所示，通过乘法可以实现对单一字符串的重叠复制，而通过加法可以将两个字符串进行拼接。</p><p>如何获取字符串中某一字符呢？请看下图：</p><p><img src="https://img-blog.csdnimg.cn/20181108125413835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到通过在字符串后面跟上中括号的而形式来对内容进行截取！上面的例子都是正数的下标，那么如果要是负数的下标是否可以呢？</p><p><img src="https://img-blog.csdnimg.cn/20181108125429865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以通过负数来进行相应的倒数截取字符串！负下标的目的是什么呢？如果你字符串中内容很多，比如有1W个字符，那让你取倒数第二个，你不得一直数下去了。。！所以python创出了负数下标的表达方式。</p><h3 id="字符串额外小知识"><a href="#字符串额外小知识" class="headerlink" title="字符串额外小知识"></a>字符串额外小知识</h3><p>说到字符串，回想下在上一章，我曾经说过的转义字符，那么实际上python有一个转义字符的小知识点！</p><p>场景如下：</p><p>现在让你用print()在idle中打印出 </p><pre class=" language-python"><code class="language-python">'你好 ！我是你的老铁！'</code></pre><p>想必你会知道这样去写:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好！ \n 我是你的老铁！'</span><span class="token punctuation">)</span></code></pre><p>如果此时，我就想让结果显示出<code>&#39;你好！ \n 我是你的老铁！&#39;</code>呢？</p><p>在python中有着一个 r 或者 R 的写法，可以将原始转义字符不进行转义输出！r代表的含义是：raw，中文是未加工的的意思！也就是原始的意思。</p><p>写法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'你好！ \n 我是你的老铁！'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>R<span class="token string">'你好！ \n 我是你的老铁！'</span><span class="token punctuation">)</span></code></pre><p>我们通过idle试一下，将代码输入看下结果：</p><p><img src="https://img-blog.csdnimg.cn/20181108125605962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上面输出将原有的转义字符直接打印出来了！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>字符串运算</code>在日常的编码中也是用到非常频繁的，尤其是+号来对字符串进行拼接！而相应的，切片对字符串的截取也是必要掌握的小技能，在处理数据时，会经常用到切片的概念！</p><p>当你看到<code>r</code>加在’’字符串前面，则代表的是<code>原始字符串(raw str)</code>，其中包含的转义字符将失去转义自身的含义！</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂05 - 基本数据类型字符串篇(重要)</title>
      <link href="/2019/08/14/python-xiao-ke-tang-05-ji-ben-shu-ju-lei-xing-zi-fu-chuan-pian-chong-yao/"/>
      <url>/2019/08/14/python-xiao-ke-tang-05-ji-ben-shu-ju-lei-xing-zi-fu-chuan-pian-chong-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂05-基本数据类型字符串篇-重要"><a href="#python小课堂05-基本数据类型字符串篇-重要" class="headerlink" title="python小课堂05 - 基本数据类型字符串篇(重要)"></a>python小课堂05 - 基本数据类型字符串篇(重要)</h2><h3 id="什么是字符串？"><a href="#什么是字符串？" class="headerlink" title="什么是字符串？"></a>什么是字符串？</h3><blockquote><p>题西林壁         作者：苏轼<br>横看成岭侧成峰，远近高低各不同。<br>不识庐山真面目，只缘身在此山中。</p></blockquote><p>如上面的诗词一样，将其映射到我们计算机程序中，显然不是前几张介绍的数据类型，那么今天就来说下编程中最常用的数据类型 — 字符串类型(英文<code>str</code>)。</p><p>如何在python中表示字符串类型呢？</p><pre class=" language-python"><code class="language-python">有三种表示的方法： <span class="token string">'横'</span>，<span class="token string">"看"</span>，<span class="token triple-quoted-string string">"""成玲"""</span> ，<span class="token triple-quoted-string string">'''侧成峰'''</span>注意<span class="token punctuation">:</span>以上分别是单引号<span class="token punctuation">;</span>双引号<span class="token punctuation">;</span>三双引号<span class="token punctuation">;</span>三单引号。<span class="token punctuation">(</span>全部为输入法英文状态下！<span class="token punctuation">)</span></code></pre><blockquote><p>Tips:<br>引号在程序中出现要成对出现！并且引号一定要在英文输入法状态下！</p></blockquote><h3 id="动手实践字符串类型"><a href="#动手实践字符串类型" class="headerlink" title="动手实践字符串类型"></a>动手实践字符串类型</h3><p>打开idle，让我们实践一下字符串类型：</p><p><img src="https://img-blog.csdnimg.cn/20181107192701963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到，当我们使用中文的单引号和双引号时，python会报错！(不仅是单双引号必须是英文状态，因为编程语言是国外发明的，所以输入法也必须跟国外<code>一致</code>，必须使用<code>英文</code>！)同时，可以看到被单引号，双引号括起来的内容类型，是<code>str</code>，即<code>字符串</code>类型。</p><p>大家思考一个问题！单单是字符串的写法就有三种，为什么python创始人要设计出三种写法呢？必然是各有各的好处的！请看下面的写法：<br><img src="https://img-blog.csdnimg.cn/20181107192739240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图中蓝色字体已经阐述出单引号和双引号设计之处的用心了！不在多做阐述。</p><h3 id="字符串中涉及到的转义字符写法"><a href="#字符串中涉及到的转义字符写法" class="headerlink" title="字符串中涉及到的转义字符写法"></a>字符串中涉及到的转义字符写法</h3><p>还有没有除了利用单双引号不同写法，来完成本身语义的表示呢？必然是有的，这里引出一个概念，转义字符，请看下图：</p><p><img src="https://img-blog.csdnimg.cn/20181107192800674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>通过 \ 加上字符串中想表达的引号，构成了转义字符的写法，可以看到程序也正常输出了！<code>但是</code>不推荐这种写法，看上去很<code>复杂</code>，并且容易<code>出错</code>，如果可以用单双引号解决，还是使用上文涉及到的方法来书写，这样才比较pythonic(开篇介绍过此词，可以查看00篇)！</p><blockquote><p>Tips:<br>转义字符(弄明白转义即可！)：<br>\n   换行<br> \ ‘    单引号<br>\t    横向制表符<br>\r    回车<br>\n和\r 是有区别的</p></blockquote><h3 id="字符串的三引号表示含义"><a href="#字符串的三引号表示含义" class="headerlink" title="字符串的三引号表示含义"></a>字符串的三引号表示含义</h3><p>除了单双引号，上面还说到过三引号也是可以表示字符串的！那么它的使用场景是什么呢？来看下面的例子：</p><p><img src="https://img-blog.csdnimg.cn/20181107192959402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>       所以问题来了，我现在想输入两个hello world后就进行换行，如何操作呢？请看下图：</code></pre><p> <img src="https://img-blog.csdnimg.cn/20181107193018526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token triple-quoted-string string">'''hello worldhello worldhello world'''</span><span class="token string">'\nhello world\nhello world\nhello world\n'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token triple-quoted-string string">""" hello worldhello worldhello world """</span><span class="token string">' hello world\nhello world\nhello world '</span><span class="token operator">>></span><span class="token operator">></span> </code></pre><p>   可以看到一个问题，此处python已经将我们的回车转成\n 显示出来(此处实际上是IDLE的一个特色，了解即可)！字符串实际上有些特殊字符是我们<code>肉眼看不到的</code>，但不代表<code>不存在于字符串</code>当中！例如<code>\n</code>，代表<code>回车</code>。。。</p><p>反向思维思考一下？如果我们在字符串中手动写上\n，此时IDLE会输出什么呢？来看一下：<br><img src="https://img-blog.csdnimg.cn/20181107193132296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上图，\n并没有我们想象的那样换行输出！</p><p>普及一个常识，在写程序中，换行还有一个更加简便的方法！来看下图：</p><p>  <img src="https://img-blog.csdnimg.cn/20181107193150430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>字符串</code>是编程中最<code>常用</code>到的数据类型，因此熟练掌握是非常重要的！本期小课堂介绍的内容非常多，也是字符串的重要性所在！回顾一下，字符串在python中的表达方式，各种写法的区别，以及转义字符的含义！</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>思考问题：为什么\n并没有我们想象的那样换行输出！？？</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂04 - 基本数据类型布尔篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-04-ji-ben-shu-ju-lei-xing-bu-er-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-04-ji-ben-shu-ju-lei-xing-bu-er-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂04-基本数据类型布尔篇"><a href="#python小课堂04-基本数据类型布尔篇" class="headerlink" title="python小课堂04 - 基本数据类型布尔篇"></a>python小课堂04 - 基本数据类型布尔篇</h2><h3 id="什么是布尔类型？"><a href="#什么是布尔类型？" class="headerlink" title="什么是布尔类型？"></a>什么是布尔类型？</h3><p>布尔类型：<code>英文boolean。</code></p><p>举个栗子，比如今天是愚人节！你发工资了，于是你兴高采烈的去与同事探讨一番，同事偷偷的告诉你，他涨工资了！然后你表示很开心，但是你意识到今天是愚人节了，于是你充满疑问的心态去问他，真的涨工资了吗？！他回答你：真的！(此处的真便是布尔类型的一种)。夜幕降临，当你打开手机查看工资详细的时候发现工资并没有涨！原来同事说的都是假话！！！(此处的假便是布尔类型的另一种)。</p><p>在真实世界中的真假，映射到计算机中，即布尔类型。所以在python中，boolean 的值有两种，一种为<code>真(英文:True，T要大写！)</code>,一种为<code>假(英文:False,F大写！)。</code></p><h3 id="动手实践布尔类型"><a href="#动手实践布尔类型" class="headerlink" title="动手实践布尔类型"></a>动手实践布尔类型</h3><p>打开idle，让我们实践一下布尔类型：</p><p><img src="https://img-blog.csdnimg.cn/20181106205925815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到上图，在python中通过type()查看True或者False得到的类型是bool(而在其他语言中，布尔类型一般关键词用boolean来表示)。</p><h3 id="布尔类型在python中隶属于数字"><a href="#布尔类型在python中隶属于数字" class="headerlink" title="布尔类型在python中隶属于数字"></a>布尔类型在python中隶属于数字</h3><p>如下图所示，我们可以将布尔值转为数字来观察，发现将True转为数字后就是1，False转为数字后就是0.</p><p><img src="https://img-blog.csdnimg.cn/20181106205954374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> int<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">1.111111</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">0b01</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> </code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>布尔类型在编程中是非常常用的，在写一些逻辑判断的过程中，需要用布尔类型来判断程序是否应该进行怎样的逻辑运行，就像日常生活中，如果你坐上了公交车(此时为真)，那么你就得刷卡交钱！(符合布尔型为真后做的事情)</p><p><img src="https://img-blog.csdnimg.cn/20181106210037963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂03 - 基本数据类型进制篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-03-ji-ben-shu-ju-lei-xing-jin-zhi-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-03-ji-ben-shu-ju-lei-xing-jin-zhi-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂03-基本数据类型进制篇"><a href="#python小课堂03-基本数据类型进制篇" class="headerlink" title="python小课堂03 - 基本数据类型进制篇"></a>python小课堂03 - 基本数据类型进制篇</h2><h3 id="什么是进制？"><a href="#什么是进制？" class="headerlink" title="什么是进制？"></a>什么是进制？</h3><blockquote><p>来自百度:<br>进制也就是进位计数制，是人为定义的带进位的计数方法（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的“正”字计数法，以及类似的tally mark计数）。 对于任何一种进制—X进制，就表示每一位置上的数运算时都是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p></blockquote><p>通俗的讲，所为的进制就是一种计数时表示的方法，多少进制，就是当满足此进制时就向高位进一位，比如我们生活中常用的十进制，11 + 9 = 20,个位数1 + 9 = 10，所以此时向高一位进1，最后得出的结果就是20。举个更简单的例子，生活中我们经常以60秒作为1分钟来计数，这也可以理解为一种进制（“60进制”）。</p><blockquote><p>Tips(小常识):<br>二进制： 0 和 1 表示.</p></blockquote><blockquote><p>八进制：0，1，2，3 ，4，5，6，7</p></blockquote><blockquote><p>十六进制：0,1,2,3….9，A,B,C,D,E,F<br>(十六进制从10到15分别用A-F来表示)</p></blockquote><h3 id="动手实践各种进制"><a href="#动手实践各种进制" class="headerlink" title="动手实践各种进制"></a>动手实践各种进制</h3><p>有了上节课的IDLE基础，这次来看下在python中，对应的进制数是如何表达的呢？</p><p>找到python中的idle，前期练手通过这个工具比较便捷，可以右键发送到桌面，下次找就不用费劲了！（后续不在介绍了！）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIarypl3bSrumybnibYAeg7Z6d4Ktp12KeicibKR0wjFVHHEItOLnf1e0722jBpMsiajMJZnBcJiauwzn4g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>先来看下在python中，如何表达二进制，八进制，十六进制以及我们常用的十进制，如下图所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIZcgX4n68P9MS9qo8zmEDickEutaKib6eiaZgOSnEa2uqjCmicmSmFZj5icp3zxbIicFLMA3Suf6JRcGsibw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>0b:binary(二进制) 所以小写b</p><p>0o:octal(八进制) 所以小写o</p><p>0x:Hexadecimal(十六进制) 所以小写x</p><p>由上图可以看到结果：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b1</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b10</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b100</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b1000</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o1</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o10</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o100</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o1000</span><span class="token number">512</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x1</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x10</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x100</span><span class="token number">256</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x1000</span><span class="token number">4096</span><span class="token operator">>></span><span class="token operator">></span> </code></pre><p>如何计算出上图的结果呢？</p><p>二进制计算：</p><pre class=" language-python"><code class="language-python"><span class="token number">0b1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0b10</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token number">0b100</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token number">0b1000</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">8</span></code></pre><p>这也是学过计算机专业同学嘴中经常说到的“8421”！等同于二进制的1111。</p><p>八进制计算：</p><pre class=" language-python"><code class="language-python"><span class="token number">0o1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0o10</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token number">0o100</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">64</span></code></pre><p>……后续以此类推！</p><p>十六进制不列举了，一个道理！</p><p>忘了说了！常规的十进制，实际在python中正常输入即可，就像上一章所讲的整数类型，所表示的都是十进制的数字！</p><h3 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h3><p>进制之间的转换，便于我们在不同场景下有着不同的进制表示，就像生活中的时间，时间很短的情况下，咱们可以用秒作为单位来衡量，一旦时间很长，则用分钟，或者小时来计量了，此时需要将秒转换为分钟或者小时，与进制是一个道理的！</p><p>下面来看下python中如何将上述的进制之间做转换。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIZcgX4n68P9MS9qo8zmEDickAvjZFSzQric3ZugSG3Idsw5QeKKvpKbIypDqskBcu86HNWkpL0Jhs2g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>bin(): 将括号中的数值转为二进制</p><p>int():将括号中的数值转为十进制</p><p>oct():将括号中的数值转为八进制</p><p>hex():将括号中的数值转为十六进制</p><p>以上四个函数方法类似于上章讲到的type()，大家可以先理解这是一种写法即可。在python中这样的语法非常简单，就如同写英语一样，就是一句话！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在我们实际的编程过程中，进制可能会接触的非常少，但是依然会用到，再此算是做一个基础的总结吧。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIZcgX4n68P9MS9qo8zmEDickSibe4Wq2x8tILbeGvA6hYGpK8geA7YuKU5C1od8CNibJtMjYkApaLXrg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂02 - 基本数据类型数字篇</title>
      <link href="/2019/08/14/python-xiao-ke-tang-02-ji-ben-shu-ju-lei-xing-shu-zi-pian/"/>
      <url>/2019/08/14/python-xiao-ke-tang-02-ji-ben-shu-ju-lei-xing-shu-zi-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂02-基本数据类型数字篇"><a href="#python小课堂02-基本数据类型数字篇" class="headerlink" title="python小课堂02 - 基本数据类型数字篇"></a>python小课堂02 - 基本数据类型数字篇</h2><h3 id="什么是基础数据类型-？"><a href="#什么是基础数据类型-？" class="headerlink" title="什么是基础数据类型 ？"></a>什么是基础数据类型 ？</h3><p>在我们的日常生活中，当我们去菜市场买菜交钱的时候，会出现用<strong>数字</strong>作为计量单位来衡量一个物品值多少钱，而此时交钱的数字有零有整，比如一斤普通鸡蛋的价钱是1元钱整，我们将1元钱称之为<strong>整数</strong>；一斤普通鸭蛋的价钱是1.7元，我们将之称之为小数。</p><p>上面的例子对应到我们的Python编程语言中也是一样的，在Python中，最基础的数据类型有数字(number)，数字又分为整数(<strong>int</strong>)和小数(专业点来说:浮点数,<strong>英文float</strong>)。</p><p>结论来了:数字中的整数(int)，小数(float)就是python众多基础数据类型中的两员。</p><blockquote><p>Tips(小常识):<br>在其他的编程语言中，浮点数还会细分：单精度(float)，双精度(double)，双精度的小数位准确率是高于单精度的！而在Python语言中，不会区分单双精度，只有一种类型，即float！<br>对于整数来说，其他语言还会有short，long这样的数据类型，对于python而言，整数类型只有一个，就是int！</p></blockquote><h3 id="动手实践int、float"><a href="#动手实践int、float" class="headerlink" title="动手实践int、float"></a>动手实践int、float</h3><p>编程，光理解概念是不够用的，必须动手实践一下才能出真理！</p><p>还记得上一篇安装环境我在最后说过的一个python自带工具IDLE，今天我们就用这个工具来亲自动手实践一下！</p><blockquote><p>Tips(小常识):<br>IDLE:IDLE 是一个纯 Python 下自带的简洁的集成开发环境(IDE)。用通俗的话来讲，大家可以将其理解为一个高级点的计算器，我们通过键盘向这个窗口进行输入，而IDLE通过我们输入的东西进行计算，最后通过窗口将结果进行输出。</p></blockquote><p>找到python中的idle，前期练手通过这个工具比较便捷，可以右键发送到桌面，下次找就不用费劲了！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIarypl3bSrumybnibYAeg7Z6d4Ktp12KeicibKR0wjFVHHEItOLnf1e0722jBpMsiajMJZnBcJiauwzn4g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>让我们在IDLE上随意输入几个数字看看：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIarypl3bSrumybnibYAeg7Z6GQXwIYQ1KSGFDYPW6qGSfSwkFfcEY3Wx5sOwytDlFibeCPNqDyTl9bA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>接下来试下计算器的效果：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIarypl3bSrumybnibYAeg7Z6HaXfGrkTocm0ic5NYSt43IOhHU5iceA2zEXhgRWbA5NpEQiarMUUa5Szw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>别忘了今天的主旨！我们学习的是python的基础数据数字篇！所以如何来查看python的数字到底是什么类型的呢？这里引入一个python自带的函数 — type()</p><p>至于什么是函数,在后续的文章中会有介绍，这里大家暂时理解为python中的一个写法就行，我通过这样的写法就可以知道我在IDLE中输入的数字属于什么类型。看下图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIarypl3bSrumybnibYAeg7Z6bNibhib0rKzianG1ZKWnpI2UGzpdYVyantttr1lENNJX8mGpRBZImNBRg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>数字1  —&gt; int ，数字1.23333333  —&gt; float。以上就是基础类型的数字篇。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>留下一个小问题给大家，如果当我输入的是 99/10 的时候，此时的类型是什么呢？当我输入的 99 // 10的时候，又是什么呢？</p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂01 - 环境安装</title>
      <link href="/2019/08/14/python-xiao-ke-tang-01-huan-jing-an-zhuang/"/>
      <url>/2019/08/14/python-xiao-ke-tang-01-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂01-环境安装"><a href="#python小课堂01-环境安装" class="headerlink" title="python小课堂01 - 环境安装"></a>python小课堂01 - 环境安装</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>先从其自身的环境安装讲起吧….以下均为图解 + 文字说明,便于解释!</p><h3 id="Python-环境安装"><a href="#Python-环境安装" class="headerlink" title="Python 环境安装"></a>Python 环境安装</h3><p>1.在编程的世界中,最权威的网站只有每种技术提供的官方网站！所以第一步就是上Python的官方网站！<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>打开就是下面这个样子：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkwiaE8Tv5FhUQyNkox400sNVxdpYsJRSbJx6dGqQEvaYPMX503a0ibnVg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>现在的Python版本依然是两派,一派是Python2.x,一派是Python3.x。要说的一点是Python2.x会在2020年停止维护,所以如果你是初学python,那么我强烈推荐使用3.x以上的版本,后续的系列文章我也是基于Python3.x+系列讲解的。</p><p>2.在官网上根据自己对应的操作系统进行相关的安装包下载：</p><p>打开网页是下面这样的：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkHIo2SeOlxms8zBsLVAo4Kt9ssz07FObl53WEY9qW1dYPEicMq0TvNHw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>3.根据大家最大众化系统，我这里就用Windows来作为安装讲解。</p><p>① 无脑双击python.exe文件<br><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPk60AJrBibVQh4ISDvMp5O0IdtTeIuhxLeFQBObFIdiaQIcOyN954xx4kQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>②进入安装界面</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkpLHGwpiaSEibqTqFKDepxo45wpmr8I93LylcgDK8JXUCgTKrtZaAWwpQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>③选择配置</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkkVI3Nyoqic2fM7IMhqSyPVibEM5dZKiaq1CweClmKMCmb5oia034WPIicAA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkFicYFLGr5B9Eg59WnGiaJ6AjlwmuZXyJCdZ0qNBmfcMCRSWCnZInCL2A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPklus1fkjX3g6rzoZUJCpr6hbWRZYXIoXq6efRpEf7Mb27ibBPl9lsw6w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>④ 再次路径下，可以找到一个叫IDLE的工具：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkVnzKhSnia1JNibdPzicZZQ9IssZibY1ialJC3DZqJs9xa95kUwbgUBcIGhA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>4.双击idle,可以看到如下图:</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkk9Ern0tCX4pZfqetIO13H67G3OUHHTbLhicCcwI8mIFqV7HgsQjSObw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>可以看到这样弹出来一个框！这个框就是我们用命令与Python交互的一个窗口！</p><p>5.书写第一个Python程序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!!!'</span><span class="token punctuation">)</span></code></pre><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkVq0UcdJwibPic75Lk30ALDKOIw5iatdL7ro5fQPtwn7feWVkkOqM8LlQw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是python环境变量的安装！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/E4ianOkSOYIa5PBhShGAeF97cF4cRWrPkxranSibcawljNtK0oBEiaAHEH7PtUBagsyf0ibicnz45lJ3vlNtibXWCAbw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python小课堂00 - Why Python</title>
      <link href="/2019/08/14/python-xiao-ke-tang-00-why-python/"/>
      <url>/2019/08/14/python-xiao-ke-tang-00-why-python/</url>
      
        <content type="html"><![CDATA[<h2 id="python小课堂00"><a href="#python小课堂00" class="headerlink" title="python小课堂00"></a>python小课堂00</h2><h3 id="01-THE-FIRST-编程、编程语言"><a href="#01-THE-FIRST-编程、编程语言" class="headerlink" title="01 THE FIRST 编程、编程语言?"></a>01 THE FIRST 编程、编程语言?</h3><p>首先，在正题了解Python开始之前，让我们先来聊聊什么是编程吧！编程 - 中国文字拆分开来，就是编写程序的意思,英文 Programing。举个例子，假如老板给了我一个任务，要求是每天都要记录天气，并且最后以报表的形式报告给他！于是我按照他说的做了，每天早上9:00，打开浏览器，百度查看今天的天气,将当天的天气数据记在excel中。日复一日，终于有一天我厌倦了这样繁琐，重复的操作！开始自己想法让电脑自己来完成这一系列，在网络的搜索过程中，我得知了计算机是通过编程语言来实现操作的，比如我点击鼠标这个动作，对应着计算机背后的一条指令。那么如果我按照平时手动的操作去让计算机来帮我实现，这一系列过程(电脑自己打开浏览器,电脑自己查百度,电脑自己记录数据)就是编程！</p><p>在上面的例子中提到了编程语言，什么又是编程语言呢？通俗的讲，就是人与计算机交流的语言，你跟计算机说什么，它就得干什么!而现代社会，编程语言层出不穷,比如师祖老大哥C语言(贴近硬件的语言…),然后它的小弟C++(大型软件,例如游戏引擎…),灵感来源于咖啡的Java(web时代的王者…),还有文章的主角 — Python(人工智能时代的”弄潮儿”…),等等等等，还有很多语言就不一一列举了！</p><h3 id="02-THE-SECOND-Why-Python"><a href="#02-THE-SECOND-Why-Python" class="headerlink" title="02 THE SECOND Why Python?"></a>02 THE SECOND Why Python?</h3><p>Why Python？为什么要学Python？废话不多说，先来看2张图！</p><p>漫画一：<br><img src="https://img-blog.csdnimg.cn/20181104162700177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图片右下角是python(被我的水印挡住了!)</p><p>图二(自己总结的思维导图)：</p><p><img src="https://img-blog.csdnimg.cn/20181104162711593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以，为什么选python？我想两张图足以表达我想说的了…当然python届最著名的的一句话莫过于：</p><pre class=" language-python"><code class="language-python"> Life <span class="token keyword">is</span> Simple<span class="token punctuation">,</span>I Use Python!       人生苦短<span class="token punctuation">,</span>我用Python!</code></pre><p>作为编程语言来讲，Python所具有的特色就是简洁！其自身语法读起来，就像读英文故事一样(当然代码本身的风格具备pythonic①)</p><p>这也是为什么我一直想使用Python的原因，因为简洁，所以贴近生活，非常容易解决身边的难点！</p><p>注：①pythonic:很·python！就像说英语一样的关键词语法!例如 in,代表的是包不包含….</p><h3 id="03-THE-THIRD-Python一行代码"><a href="#03-THE-THIRD-Python一行代码" class="headerlink" title="03 THE THIRD Python一行代码"></a>03 THE THIRD Python一行代码</h3><pre class=" language-python"><code class="language-python">        Python 之禅Simple <span class="token keyword">is</span> better than complex<span class="token punctuation">.</span>        简洁胜于复杂</code></pre><p>说了这么多,来实际看下Python的代码魅力,所谓一行代码可以作出哪些事情来？</p><p>一行代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'AndyLove'</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">else</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181104162825207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一行代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s*%s=%-2s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181104162835107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M3NDA1NTY0NzI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其实还有很多类似这样的代码….简洁而强大!</p><h3 id="04-THE-LAST-结语"><a href="#04-THE-LAST-结语" class="headerlink" title="04 THE LAST 结语"></a>04 THE LAST 结语</h3><p>emmm….本期的python小课堂00篇到这里就结束了，真的是人生苦短，我用Python呀！(绿了….捂脸逃…) </p>]]></content>
      
      
      <categories>
          
          <category> PythonA基础篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Nginx 和 Gunicorn 部署 Django 博客</title>
      <link href="/2019/02/26/shi-yong-nginx-he-gunicorn-bu-shu-django-bo-ke/"/>
      <url>/2019/02/26/shi-yong-nginx-he-gunicorn-bu-shu-django-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>针对很多朋友反映按照教程的做法始终只能看到 Nginx 欢迎页面的问题，Tian Pengfei sanyuwen 给出了很好的建议。如果你也被类似问题困扰，不妨尝试一下这个建议。</p><blockquote><p>这个问题也困扰了很久，最终发现是sites-enabled文件夹里默认的default文件中的配置覆盖了自己写的配置，导致配置不生效，把default文件删掉就可以正常被nginx代理过去了，亲测有效</p></blockquote><p>我们博客的基础功能已经开发的基本差不多了，虽然还有很多地方可以完善，但我们还是希望早点把博客部署到服务器上，让他人可以通过外网访问。至于有待完善的地方，可以等部署完后一点点地迭代和改进。现在就让我们来把博客部署到服务器上吧！</p><p><strong>注意：本文的每一个步骤都在真实环境下验证无误。除非你知道自己在做什么，否则我们建议每一步均严格按照教程的指导来，这样能保证你顺利完成部署。</strong></p><h1 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a><strong>部署前准备</strong></h1><p>我们将使用比较流行的 Nginx + Gunicorn 的方式将 Django 开发的博客部署到自己的服务器，让别人能够通过域名访问你的博客。至于 Nginx、Gunicorn 是什么暂时放到一边，读完本教程后你就会知道它们的作用和使用方法了。</p><p>为了部署我们的博客，需要满足以下两个条件：</p><ol><li>有一台可以通过外网访问的服务器。</li><li>有一个域名。<br>如果你已经满足以上条件，可以直接跳到后面的搭建服务器部分。这里简单介绍一下我目前所知的以最低成本满足以上两个条件的方式。</li></ol><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a><strong>购买服务器</strong></h2><p>如果你是学生，推荐购买阿里云服务器，学生优惠价是 9.9 元/月，而且服务器性能比较高。购买地址：阿里云服务器学生专区。具体的购买步骤这里就不赘述了，根据网站的指引相信你肯定能够购买成功。只是注意一点的是在选服务器类型的时候选择公共镜像，这样系统比较纯净。操作系统建议选 ubuntu 14.04 64位，这是本教程使用的服务器环境。</p><p>如果你不是学生，推荐购买搬瓦工 vps。目前最便宜的是 19.9美元/年，缺点是服务器性能没有阿里云高，但优点是顺带可以用它来搭梯子，从此访问 google、youtube 不是梦（基于 shadowsocks 只需简单几步就可以搭建起自己的梯子服务器）。同样购买的过程就不赘述了，搬瓦工 vps 中文网 有超级详细的指引。只是注意安装操作系统时建议选 ubuntu 14.04 64位，这是本教程使用的服务器环境。</p><p>如果你不差那点钱，随意选择一个云服务器提供商购买一个云服务器即可。</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><strong>购买域名</strong></h2><p>域名服务商很多，我这里使用的是 阿里云域名注册系统。域名是网站的门牌，如果打算长期运营这个网站建议多考虑考虑，选一个适当的域名。如果只是为了测试，随便注册一个域名即可，一些非常见后缀的域名非常便宜，一般 10元/年就能搞定。但注意一点根据工信部规定，以下后缀的域名需要实名认证后才能使用：</p><p>.cn/.com/.net/.top/.xyz/.vip/.club/.ren/.wang/.shop/.xin/.中国/.信息/.公司/.网络/.广东/.佛山</p><p>如果你购买的是上述后缀的域名，意味着需要提交个人的身份资料实名认证后才能正常使用，这通常需要花费几天的时间。所以如果只为了测试和学习部署的话，最好避开上述后缀的域名。</p><h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a><strong>搭建服务器</strong></h2><p>本教程使用的本地环境为 Windows 10，服务器环境为 ubuntu 14.04（64 位）。如果你的环境和我的有所差异导致一些命令无法执行，将这些命令转换为你所在环境的命令执行即可。</p><p><strong>远程登录到服务器</strong></p><p>服务器通常位于云端，需要使用远程登录工具登录后才能对服务器进行操作。我使用的是 Xshell，Windows 下百度 Xshell 下载安装即可，软件对学校和个人用户是免费的。</p><p>如何远程登录到服务器这里就不赘述了，相信你参考网上的一些教程肯定能够顺利登录。假如你和我一样使用 Xshell 的话，这里有一篇很详细的教程可以参考：教你怎么使用xshell远程连接linux服务器。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a><strong>安装软件</strong></h2><p>顺利连接到远程服务器了。如果是一台全新服务器的话，通常我们是以 root 用户登录的。在 root 下部署代码不安全，最好是建一个新用户（如果你已经以非 root 用户登录的话可以跳过这一步）。下面的一些列命令将创建一个拥有超级权限的新用户：</p><pre><code># 在 root 用户下运行这条命令创建一个新用户，yangxg 是用户名# 因为我叫杨学光，所以我取的用户名是 yangxg# 选择一个你喜欢的用户名，不一定非得和我的相同root@localhost:~# useradd -m -s /bin/bash yangxg# 把新创建的用户加入超级权限组root@localhost:~# usermod -a -G sudo yangxg# 为新用户设置密码# 注意在输密码的时候不会有字符显示，不要以为键盘坏了，正常输入即可root@localhost:~# passwd yangxg# 切换到创建的新用户root@localhost:~# su - yangxg# 切换成功，@符号前面已经是新用户名而不是 root 了yangxg@localhost:~$</code></pre><p>新用户创建并切换成功了。如果是新服务器的话，最好先更新一下系统，避免因为版本太旧而给后面安装软件带来麻烦。运行下面的两条命令：</p><pre><code>yangxg@localhost:~$ sudo apt-get updateyangxg@localhost:~$ sudo apt-get upgrade</code></pre><p>接下来就可以安装必要的软件了，这里我们需要用到的软件有 Nginx、Pytohn3、Git、pip 和 virtualenv。</p><pre><code>yangxg@localhost:~$ sudo apt-get install nginxyangxg@localhost:~$ sudo apt-get install git python3 python3-pipyangxg@localhost:~$ sudo pip3 install virtualenv</code></pre><h2 id="解析域名到服务器的-IP-地址"><a href="#解析域名到服务器的-IP-地址" class="headerlink" title="解析域名到服务器的 IP 地址"></a><strong>解析域名到服务器的 IP 地址</strong></h2><p>将域名和服务器的 IP 地址绑定后，用户就可以通过在浏览器输入域名来访问服务器了。</p><p>各大域名服务商都提供了域名解析服务，但其配置界面各有差异，请依据其指引完成域名解析。下面是我使用的阿里云域名解析页面。</p><p><img src="https://i.imgur.com/LNioqy0.png" alt=""></p><h2 id="启动-Nginx-服务"><a href="#启动-Nginx-服务" class="headerlink" title="启动 Nginx 服务"></a><strong>启动 Nginx 服务</strong></h2><p>Nginx 是用来处理静态文件请求的。比如当我们访问一个博客文章详情页面时，服务器会接收到下面两种请求：</p><ul><li>显示文章的详情信息，这些信息通常保存在数据库里，因此需要调用数据库获取数据。</li><li>图片、css、js 等存在服务器某个文件夹下的静态文件。</li></ul><p>对于前一种请求，博客文章的数据需要借助 Django 从数据库中获取，Nginx 处理不了，它就会把这个请求转发给 Django，让 Django 去处理。而对于后一种静态文件的请求，只需要去这些静态文件所在的文件夹获取，Nginx 就会代为处理，不再麻烦 Django。</p><p>用 Django 去获取静态文件是很耗时的，但 Nginx 可以很高效地处理，这就是我们要使用 Nginx 的原因（当然其功能远不止这些）。</p><p>通过前面的步骤我们已经安装了 Nginx，并且已经把域名和服务器 IP 绑定了。运行下面的命令启动 Nginx 服务：</p><pre><code>yangxg@localhost:~$ sudo service nginx start</code></pre><p>在浏览器输入域名，看到如下页面说明 Nginx 启动成功了。</p><p><img src="https://i.imgur.com/fFjzjkp.png" alt=""></p><h1 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a><strong>部署代码</strong></h1><h2 id="部署前的项目配置"><a href="#部署前的项目配置" class="headerlink" title="部署前的项目配置"></a><strong>部署前的项目配置</strong></h2><p>Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，我们把项目中的全部静态文件收集到一个统一的目录下，这个目录通常位于 Django 项目的根目录，并且命名为 static。为了完成这些任务，需要在项目的配置文件里做一些必要的配置：</p><pre><code>blogproject/settings.py# 其他配置...STATIC_URL = &#39;/static/&#39;# 加入下面的配置STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)</code></pre><p>STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。</p><p>为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py 文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值：</p><pre><code>blogproject/settings.pyDEBUG = FalseALLOWED_HOSTS = [&#39;127.0.0.1&#39;, &#39;localhost &#39;, &#39;.zmrenwu.com&#39;]</code></pre><p>ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名，.zmrenwu.com 是访问服务器的域名（换成你自己的域名）。域名前加一个点表示允许访问该域名下的子域名，比如 <a href="http://www.zmrenwu.com、test.zmrenwu.com" target="_blank" rel="noopener">www.zmrenwu.com、test.zmrenwu.com</a> 等二级域名同样允许访问。如果不加前面的点则只允许访问 zmrenwu.com。</p><p>项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，我们将全部依赖写入一个叫 requirements.txt 的文本文件中。激活本地的虚拟环境（如果你使用了虚拟环境的话），并进入项目的根目录，运行 pip freeze &gt; requirements.txt 命令：</p><pre><code>(blogproject_env) C:\Users\yangxg\Workspace\blogproject&gt;pip freeze &gt; requirements.txt</code></pre><p>这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖。</p><h2 id="将代码上传到-GitHub"><a href="#将代码上传到-GitHub" class="headerlink" title="将代码上传到 GitHub"></a><strong>将代码上传到 GitHub</strong></h2><p>将代码上传到 GitHub 等代码托管平台，这样我们就可以方便地把代码拉取到服务器了。Git 和 GitHub 的使用相信你已经很熟悉了，这里就不赘述过程。如果不知道如何使用地话可以自行百度相关教程。</p><p>注意数据库文件不要上传！</p><h2 id="设置服务器目录结构"><a href="#设置服务器目录结构" class="headerlink" title="设置服务器目录结构"></a><strong>设置服务器目录结构</strong></h2><p>接下来需要把代码上传到服务器了。我服务器上存放代码的目录结构一般是这样的：</p><pre><code>/home/yangxg/    sites/       demo.zmrenwu.com/           env/           django-blog-tutorial/</code></pre><p>一台服务器可能部署多个网站，所有网站代码都放在 sites/ 目录下。demo.zmrenwu.com/ 这个文件夹以网站的域名命名，便于区分。env/ 是 python 虚拟环境目录。django-blog-tutorial/ 是 Django 博客项目目录。</p><p>因此先来创建这个目录结构，注意目录名替换为你自己的域名，以后涉及到 demo.zmrenwu.com 的地方通常都要替换你自己的域名，后面就不再一一指出了，运行下面的命令，</p><pre><code>yangxg@localhost:~$ mkdir -p ~/sites/demo.zmrenwu.com</code></pre><p>这里 ~ 代表当前用户的 home 目录，即 /home/yangxg/。</p><p>接下来创建虚拟环境，先进入到 demo.zmrenwu.com 目录下，然后运行 virtualenv 命令创建虚拟环境：</p><pre><code>yangxg@localhost:~$ cd ~/sites/demo.zmrenwu.comyangxg@localhost:~/sites/demo.zmrenwu.com$ virtualenv --python=python3 env</code></pre><p>注意这里使用 –python=python3 来指定克隆 Python3 的环境。因为 ubuntu 系统默认安装了 Python2，如果不特别指定的话 Virtualenv 默认克隆的是 Python2 的环境。</p><p>检查一下虚拟环境是否创建成功，运行 ls 命令列出当前目录下的文件和文件夹，看到 env 这个文件夹说明虚拟环境创建成功。</p><pre><code>yangxg@localhost:~/sites/demo.zmrenwu.com$ lsenv</code></pre><p>接着再从代码仓库把项目代码拉取过来，把 git clone 后的地址换成你自己的 GitHub 仓库地址！</p><pre><code>yangxg@localhost:~/sites/demo.zmrenwu.com$ git clone https://github.com/zmrenwu/django-blog-tutorial.git</code></pre><p>运行 ls 命令检查一下是否拉取成功：</p><pre><code>yangxg@localhost:~/sites/demo.zmrenwu.com$ lsdjango-blog-tutorial  env</code></pre><p>多了 django-blog-tutorial 文件夹（文件夹名称由你的 GitHub 仓库名决定），说明拉取成功了。</p><h2 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a><strong>安装项目依赖</strong></h2><p>激活虚拟环境，再进入到项目根目录，即 requirements.txt 所在的目录，安装项目的全部依赖：</p><pre><code>yangxg@localhost:~/sites/demo.zmrenwu.com$ source env/bin/activate(env) yangxg@localhost:~/sites/demo.zmrenwu.com$ cd django-blog-tutorial/(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ pip install -r requirements.txt</code></pre><h2 id="收集静态文件"><a href="#收集静态文件" class="headerlink" title="收集静态文件"></a><strong>收集静态文件</strong></h2><p>虚拟环境下继续运行 python manage.py collectstatic 命令收集静态文件到 static 目录下：</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ python manage.py collectstatic</code></pre><h2 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a><strong>生成数据库</strong></h2><p>虚拟环境下继续运行 python manage.py migrate 命令创建数据库文件：</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ python manage.py migrate</code></pre><h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a><strong>创建超级用户</strong></h2><p>虚拟环境下继续运行 python manage.py createsuperuser 命令创建一个超级用户，方便我们进入 Django 管理后台。这和本地开发时是一样的，具体请参照：在 Django Admin 后台文章。</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ python manage.py createsuperuser</code></pre><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a><strong>配置 Nginx</strong></h2><p>接下是配置 Nginx 来处理用户请求。</p><p>先在服务器的 /etc/nginx/sites-available/ 目录下新建一个配置文件，文件名我一般就设置为域名。写上下面的配置内容：</p><pre><code>/etc/nginx/sites-available/demo.zmrenwu.comserver {    charset utf-8;    listen 80;    server_name demo.zmrenwu.com; ①    location /static { ②        alias /home/yangxg/sites/demo.zmrenwu.com/django-blog-tutorial/static;     }    location / { ③        proxy_set_header Host $host;        proxy_pass http://unix:/tmp/demo.zmrenwu.com.socket;    }}</code></pre><p>① 服务的域名为 demo.zmrenwu.com。</p><p>② 所有URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录。</p><p>③ 其它请求转发给 Django 处理。proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突，这里就不再详述。</p><p>至于怎么在服务器新建文件和写文件，请自行学习一点点 vi 编辑器的用法，这里也不一一讲解了。</p><p>我们在 /etc/nginx/sites-available/ 放置了配置文件，接下来需要创建一个符号链接，把这个配置文件加入到启用的网站列表中去，被启用网站的目录在 /etc/nginx/sites-enabled/，你可以理解为从 sites-available/ 目录下发送了一个配置文件的快捷方式到 sites-enabled/ 目录。具体命令如下：</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ sudo ln -s /etc/nginx/sites-available/demo.zmrenwu.com /etc/nginx/sites-enabled/demo.zmrenwu.com</code></pre><h2 id="使用-Gunicorn"><a href="#使用-Gunicorn" class="headerlink" title="使用 Gunicorn"></a><strong>使用 Gunicorn</strong></h2><p>Gunicorn 一般用来管理多个进程，有进程挂了Gunicorn 可以把它拉起来，防止服务器长时间停止服务，还可以动态调整 worker 的数量，请求多的时候增加 worker 的数量，请求少的时候减少。</p><p>在虚拟环境下，安装 Gunicorn：</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ pip install gunicorn</code></pre><p>用 Gunicorn 启动服务器进程：</p><pre><code>(env) yangxg@localhost:~/sites/demo.zmrenwu.com/django-blog-tutorial$ gunicorn --bind unix:/tmp/demo.zmrenwu.com.socket blogproject.wsgi:application</code></pre><p>浏览器输入域名，可以看到访问成功了！</p><h2 id="自动启动-Gunicorn"><a href="#自动启动-Gunicorn" class="headerlink" title="自动启动 Gunicorn"></a><strong>自动启动 Gunicorn</strong></h2><p>现在 Gunicorn 是我们手工启动的，万一哪天服务器崩溃重启了又得重新手工启动。为此我们写一个自动启动脚本，这样当服务器重新启动后，脚本会帮我们重启 Gunicorn。先按 Ctrl + c 停止刚才启动的服务器进程。</p><p>写一个启动脚本，这样当服务器重启后能自动引导 Gunicorn 的启动。脚本位于 /etc/init/ 目录下，且脚本文件名必须以 .conf 结尾：</p><pre><code>/etc/init/gunicorn-demo.zmrenwu.com.confstart on net-device-up ①stop on shutdownrespawn ②setuid yangxg ③chdir /home/yangxg/sites/demo.zmrenwu.com/django-blog-tutorial ④exec ../env/bin/gunicorn --bind unix:/tmp/demo.zmrenwu.com.socket blogproject.wsgi:application ⑤</code></pre><p>① start on net-device-up 确保只在服务器联网时才启动 Gunicorn。</p><p>② 如果进程崩溃了（比如服务器重启或者进程因为某些以外情况被 kill），respawn 将自动重启 Gunicorn。</p><p>③ setuid 确保以 yangxg 用户的身份（换成你自己的用户名）运行 Gunicorn 进程。</p><p>④ chdir 进入到指定目录，这里进入项目的根目录。</p><p>⑤ exec 执行进程，即开启服务器进程。</p><p>现在可以用 start 命令启动 Gunicorn 了：</p><pre><code>sudo start gunicorn-demo.zmrenwu.com</code></pre><p>以后如果更新了代码，只要运行下面的命令重启一下 Nginx 和 Gunicorn 就可以使新的代码生效了：</p><pre><code>sudo service nginx reloadsudo restart gunicorn-demo.zmrenwu.com</code></pre><h2 id="使用-CDN-加快-Bootstrap-和-jQuery-的加载速度"><a href="#使用-CDN-加快-Bootstrap-和-jQuery-的加载速度" class="headerlink" title="使用 CDN 加快 Bootstrap 和 jQuery 的加载速度"></a><strong>使用 CDN 加快 Bootstrap 和 jQuery 的加载速度</strong></h2><p>我们的项目使用了 Bootstrap 和 jQuery，这两个文件我们是从本地加载的。如果服务器性能比较差的话，加载需要耗费很长的时间，网站打开的速度就变得无法忍受。我们使用 CDN 来加快加载速度。具体来说，替换 base.html 的几个静态文件的加载标签：</p><pre><code>base.html- &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'blog/css/bootstrap.min.css' %}&quot;&gt;- &lt;script src=&quot;{% static 'blog/js/jquery-2.1.3.min.js' %}&quot;&gt;&lt;/script&gt;- &lt;script src=&quot;{% static 'blog/js/bootstrap.min.js' %}&quot;&gt;&lt;/script&gt;+ &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;+ &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js&quot;&gt;&lt;/script&gt;+ &lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>这样网站访问的速度将大大提升！</p><h2 id="部署过程自动化"><a href="#部署过程自动化" class="headerlink" title="部署过程自动化"></a><strong>部署过程自动化</strong></h2><p>在整个部署过程中我们运行了十几条命令，手动输入了 N 个字符。如果每次更新代码都要远程连接到服务器执行这些命令的话将变得非常麻烦。接下来的教程我们将介绍使用 Fabric 自动化整个部署过程。写好部署脚本后，只需要执行一条命令，就可以非常方便地自动完成整个部署。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议入门（二）</title>
      <link href="/2019/02/18/hu-lian-wang-xie-yi-ru-men-er/"/>
      <url>/2019/02/18/hu-lian-wang-xie-yi-ru-men-er/</url>
      
        <content type="html"><![CDATA[<p><a href="https://huangzhazha.github.io/2019/02/13/hu-lian-wang-xie-yi-ru-men-yi/">上一篇文章</a>分析了互联网的总体构思，从下至上，每一层协议的设计思想。</p><p>这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。</p><p>==============================================================</p><p>互联网协议入门（二）</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061109.jpg" alt=""></p><p>（接上文）</p><p>七、一个小结</p><p>先对前面的内容，做一个小结。</p><p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt=""></p><p>发送这个包，需要知道两个地址：</p><ul><li>对方的MAC地址</li><li></li><li>对方的IP地址</li></ul><p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061101.jpg" alt=""></p><p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p><p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p><table><thead><tr><th>场景</th><th>数据包地址</th></tr></thead><tbody><tr><td>同一个网络</td><td>对方的MAC地址，对方的IP地址</td></tr><tr><td>非同一个子网络</td><td>网关的MAC地址，对方的IP地址</td></tr></tbody></table><p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p><p>八、用户的上网设置</p><p>8.1 静态IP地址</p><p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061110.jpg" alt=""></p><p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p><ul><li>本机的IP地址</li><li>子网掩码</li><li>网关的IP地址</li><li>DNS的IP地址</li></ul><p>下图是Windows系统的设置窗口。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061111.png" alt=""></p><p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作”静态IP地址上网”。</p><p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用”动态IP地址上网”。</p><p>8.2 动态IP地址</p><p>所谓”动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做DHCP协议。</p><p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做”DHCP服务器”。新的计算机加入网络，必须向”DHCP服务器”发送一个”DHCP请求”数据包，申请IP地址和相关的网络参数。</p><p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p><p>DHCP协议做了一些巧妙的规定。</p><p>8.3 DHCP协议</p><p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061102.png" alt=""></p><p>　　（1）最前面的”以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p><p>　　（2）后面的”IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p><p>　　（3）最后的”UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p><p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道”这个包是发给我的”，而其他计算机就可以丢弃这个包。</p><p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个”DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p><p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p><p>8.4 上网设置：小结</p><p>这个部分，需要记住的就是一点：不管是”静态IP地址”还是”动态IP地址”，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p><ul><li>本机的IP地址</li><li>子网掩码</li><li>网关的IP地址</li><li>DNS的IP地址</li></ul><p>有了这几个数值，电脑就可以上网”冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p><p>九、一个实例：访问网页</p><p>9.1 本机参数</p><p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p><ul><li>本机的IP地址：192.168.1.100</li><li>子网掩码：255.255.255.0</li><li>网关的IP地址：192.168.1.1</li><li>DNS的IP地址：8.8.8.8</li></ul><p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：<a href="http://www.google.com。" target="_blank" rel="noopener">www.google.com。</a></p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061103.png" alt=""></p><p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p><p>9.2 DNS协议</p><p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址<a href="http://www.google.com，不知道它的IP地址。" target="_blank" rel="noopener">www.google.com，不知道它的IP地址。</a></p><p>DNS协议可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061105.png" alt=""></p><p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p><p>9.3 子网掩码</p><p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p><p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p><p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p><p>9.4 应用层协议</p><p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061106.png" alt=""></p><p>HTTP部分的内容，类似于下面这样：</p><pre><code>GET / HTTP/1.1Host: www.google.comConnection: keep-aliveUser-Agent: Mozilla/5.0 (Windows NT 6.1) ......Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: gzip,deflate,sdchAccept-Language: zh-CN,zh;q=0.8Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3Cookie: ... ...</code></pre><p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p><p>9.5 TCP协议</p><p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p><p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p><p>9.6 IP协议</p><p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p><p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p><p>9.7 以太网协议</p><p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p><p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061107.png" alt=""></p><p>9.8 服务器端响应</p><p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p><p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p><p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061104.jpg" alt=""></p><p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p><p>（完）</p><p>转载自：阮一峰的网站<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 理解计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议入门（一）</title>
      <link href="/2019/02/13/hu-lian-wang-xie-yi-ru-men-yi/"/>
      <url>/2019/02/13/hu-lian-wang-xie-yi-ru-men-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-五层模型"><a href="#1-1-五层模型" class="headerlink" title="1.1 五层模型"></a>1.1 五层模型</h2><p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p><p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p><p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052902.png" alt=""></p><p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p><p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p><h2 id="1-2-层与协议"><a href="#1-2-层与协议" class="headerlink" title="1.2 层与协议"></a>1.2 层与协议</h2><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p><p>大家都遵守的规则，就叫做”协议”（protocol）。</p><p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p><h1 id="二、实体层"><a href="#二、实体层" class="headerlink" title="二、实体层"></a>二、实体层</h1><p>我们从最底下的一层开始。</p><p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052903.png" alt=""></p><p>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</p><h1 id="三、链接层"><a href="#三、链接层" class="headerlink" title="三、链接层"></a>三、链接层</h1><h2 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h2><p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p><p>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式。</p><h2 id="3-2-以太网协议"><a href="#3-2-以太网协议" class="headerlink" title="3.2 以太网协议"></a>3.2 以太网协议</h2><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”以太网”（Ethernet）的协议，占据了主导地位。</p><p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052904.png" alt=""></p><p>“标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。</p><p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p><h2 id="3-3-MAC地址"><a href="#3-3-MAC地址" class="headerlink" title="3.3 MAC地址"></a>3.3 MAC地址</h2><p>上面提到，以太网数据包的”标头”，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p><p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052905.jpg" alt=""></p><p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052906.png" alt=""></p><p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p><h2 id="3-4-广播"><a href="#3-4-广播" class="headerlink" title="3.4 广播"></a>3.4 广播</h2><p>定义地址只是第一步，后面还有更多的步骤。</p><p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p><p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p><p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p><p>回答是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052907.png" alt=""></p><p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做”广播”（broadcasting）。</p><p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><h2 id="4-1-网络层的由来"><a href="#4-1-网络层的由来" class="headerlink" title="4.1 网络层的由来"></a>4.1 网络层的由来</h2><p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p><p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p><p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052914.png" alt=""></p><p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p><p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做”网络地址”，简称”网址”。</p><p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p><p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p><h2 id="4-2-IP协议"><a href="#4-2-IP协议" class="headerlink" title="4.2 IP协议"></a>4.2 IP协议</h2><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p><p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052908.png" alt=""></p><p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p><p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p><p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p><p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p><p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p><p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p><h2 id="4-3-IP数据包"><a href="#4-3-IP数据包" class="headerlink" title="4.3 IP数据包"></a>4.3 IP数据包</h2><p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p><p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p><p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p><p>具体来说，IP数据包也分为”标头”和”数据”两个部分。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052909.png" alt=""></p><p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052910.png" alt=""></p><p>IP数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p><h2 id="4-4-ARP协议"><a href="#4-4-ARP协议" class="headerlink" title="4.4 ARP协议"></a>4.4 ARP协议</h2><p>关于”网络层”，还有最后一点需要说明。</p><p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p><p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p><p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”（gateway），让网关去处理。</p><p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是的FF：FF：FF：FF：FF：FF表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p><p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p><h1 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h1><h2 id="5-1-传输层的由来"><a href="#5-1-传输层的由来" class="headerlink" title="5.1 传输层的由来"></a>5.1 传输层的由来</h2><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p><p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p><p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p><p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p><p>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p><h2 id="5-2-UDP协议"><a href="#5-2-UDP协议" class="headerlink" title="5.2 UDP协议"></a>5.2 UDP协议</h2><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p><p>UDP数据包，也是由”标头”和”数据”两部分组成。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052911.png" alt=""></p><p>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052912.png" alt=""></p><p>UDP数据包非常简单，”标头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p><h2 id="5-3-TCP协议"><a href="#5-3-TCP协议" class="headerlink" title="5.3 TCP协议"></a>5.3 TCP协议</h2><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p><p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p><p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p><p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p><h1 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h1><p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p><p>“应用层”的作用，就是规定应用程序的数据格式。</p><p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p><p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。因此，现在的以太网的数据包就变成下面这样。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt=""></p><p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p><p>（完）<br>转载自：阮一峰的网站<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 理解计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/13/hello-world/"/>
      <url>/2019/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
